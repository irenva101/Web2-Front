{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\irenv\\\\Desktop\\\\Web2-Front\\\\src\\\\components\\\\Mapa.js\",\n  _s = $RefreshSig$();\nimport { Icon } from \"leaflet\";\nimport React, { useState, useEffect } from \"react\";\nimport mapa from \"../mapa.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../services/MapaService\";\nimport jwtDecode from \"jwt-decode\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mapa = () => {\n  _s();\n  const [porudzbine, setPorudzbine] = useState([]);\n  const [porudzbineDisplay, setPorudzbineDisplay] = useState([]);\n  const [final, setFinal] = useState([]);\n  const markers = [];\n  const customIcon = new Icon({\n    iconUrl: require(\"../images/marker-icon.png\"),\n    iconSize: [38, 38]\n  });\n\n  // Funkcija koja će dohvatiti latitude i longitude za datu adresu\n  function getLatLongForAddress(address) {\n    console.log(address);\n    const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`;\n    return fetch(nominatimUrl).then(response => response.json()).then(data => {\n      if (data && data.length > 0) {\n        console.log(data);\n        const firstResult = data[0];\n        const latitude = parseFloat(firstResult.lat);\n        const longitude = parseFloat(firstResult.lon);\n        console.log();\n        return {\n          latitude,\n          longitude\n        };\n      } else {\n        console.error(\"Adresa nije pronađena.\");\n        return null;\n      }\n    }).catch(error => {\n      console.error(\"Greška prilikom dohvatanja podataka:\", error);\n      return null;\n    });\n  }\n  function dobaviGeoKoordinate(porudzbine) {\n    var filtriranePorudzbine = porudzbine.map(function (porudzbina) {\n      return {\n        id: porudzbina.id,\n        adresaDostave: porudzbina.adresaDostave\n      };\n    });\n\n    //console.log(\"Filtrirane porudzbine: \"+ JSON.stringify(filtriranePorudzbine));\n\n    const porudzbineDisplay = [];\n\n    // Iterirajte kroz filtrirane porudžbine i dobijte latitude i longitude za svaku adresu\n    Promise.all(filtriranePorudzbine.map(async porudzbina => {\n      const {\n        id,\n        adresaDostave\n      } = porudzbina;\n      const latLong = await getLatLongForAddress(adresaDostave + \", Novi Sad, Srbija\");\n      if (latLong) {\n        porudzbineDisplay.push({\n          id: id,\n          latitude: latLong.latitude,\n          longitude: latLong.longitude\n        });\n      }\n    })).then(() => {\n      //console.log(\"Porudžbine sa dodatnim informacijama:\", JSON.stringify(porudzbineDisplay));\n    });\n    setPorudzbineDisplay(porudzbineDisplay);\n  }\n  useEffect(() => {\n    var token = localStorage.getItem(\"token\");\n    const decodedToken = jwtDecode(token);\n    fetch(`https://localhost:44388/Porudzbina/allPorudzbineProdavcaNove?korisnikId=${decodedToken[\"Id\"]}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      mode: \"cors\"\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      setPorudzbine(data);\n    }).catch(error => {\n      console.error(\"Greška prilikom dobavljanja podataka sa servera:\", error);\n    });\n    dobaviGeoKoordinate(porudzbine);\n    var temp = porudzbineDisplay.map(function (porudzbina) {\n      return {\n        id: porudzbina.id,\n        geocode: [porudzbina.latitude, porudzbina.longitude]\n      };\n    });\n\n    //console.log(\"Porudzbine display: \"+porudzbineDisplay);\n    //console.log(temp);\n    setFinal(temp);\n\n    //console.log(\"FINALLLLLLLLLLLLLLLLLLLLLLL: \"+ JSON.stringify(final));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [45.267136, 19.833549],\n    zoom: 13,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), final.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n      position: marker.geocode,\n      icon: customIcon,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Posalji porudzbinu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, marker.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(Mapa, \"MKcg6PbsMcH7Tel2OUg/zSlXGEc=\");\n_c = Mapa;\nexport default Mapa;\nvar _c;\n$RefreshReg$(_c, \"Mapa\");","map":{"version":3,"names":["Icon","React","useState","useEffect","mapa","jwtDecode","MapContainer","TileLayer","Marker","Popup","jsxDEV","_jsxDEV","Mapa","_s","porudzbine","setPorudzbine","porudzbineDisplay","setPorudzbineDisplay","final","setFinal","markers","customIcon","iconUrl","require","iconSize","getLatLongForAddress","address","console","log","nominatimUrl","encodeURIComponent","fetch","then","response","json","data","length","firstResult","latitude","parseFloat","lat","longitude","lon","error","catch","dobaviGeoKoordinate","filtriranePorudzbine","map","porudzbina","id","adresaDostave","Promise","all","latLong","push","token","localStorage","getItem","decodedToken","method","headers","Authorization","mode","temp","geocode","center","zoom","children","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","marker","position","icon","_c","$RefreshReg$"],"sources":["C:/Users/irenv/Desktop/Web2-Front/src/components/Mapa.js"],"sourcesContent":["import { Icon } from \"leaflet\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport mapa from \"../mapa.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../services/MapaService\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\n\r\nconst Mapa = () => {\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [porudzbineDisplay, setPorudzbineDisplay]=useState([]);\r\n  const [final, setFinal]=useState([]);\r\n  const markers = [];\r\n  const customIcon = new Icon({\r\n    iconUrl: require(\"../images/marker-icon.png\"),\r\n    iconSize: [38, 38],\r\n  });\r\n\r\n  // Funkcija koja će dohvatiti latitude i longitude za datu adresu\r\n  function getLatLongForAddress(address) {\r\n    console.log(address);\r\n    const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n      address\r\n    )}`;\r\n\r\n    return fetch(nominatimUrl)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && data.length > 0) {\r\n          console.log(data);\r\n          const firstResult = data[0];\r\n          const latitude = parseFloat(firstResult.lat);\r\n          const longitude = parseFloat(firstResult.lon);\r\n\r\n          console.log()\r\n\r\n          return { latitude, longitude };\r\n        } else {\r\n          console.error(\"Adresa nije pronađena.\");\r\n          return null;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greška prilikom dohvatanja podataka:\", error);\r\n        return null;\r\n      });\r\n  }\r\n\r\n  function dobaviGeoKoordinate(porudzbine) {\r\n    var filtriranePorudzbine = porudzbine.map(function(porudzbina) {\r\n      return {\r\n        id: porudzbina.id,\r\n        adresaDostave: porudzbina.adresaDostave,\r\n      };\r\n    });\r\n\r\n    //console.log(\"Filtrirane porudzbine: \"+ JSON.stringify(filtriranePorudzbine));\r\n\r\n    const porudzbineDisplay = [];\r\n\r\n    // Iterirajte kroz filtrirane porudžbine i dobijte latitude i longitude za svaku adresu\r\n    Promise.all(\r\n      filtriranePorudzbine.map(async (porudzbina) => {\r\n        const { id, adresaDostave } = porudzbina;\r\n        const latLong = await getLatLongForAddress(adresaDostave + \", Novi Sad, Srbija\");\r\n\r\n        if (latLong) {\r\n          porudzbineDisplay.push({\r\n            id: id,\r\n            latitude: latLong.latitude,\r\n            longitude: latLong.longitude,\r\n          });\r\n        }\r\n      })\r\n    ).then(() => {\r\n      //console.log(\"Porudžbine sa dodatnim informacijama:\", JSON.stringify(porudzbineDisplay));\r\n    });\r\n\r\n    setPorudzbineDisplay(porudzbineDisplay);\r\n  }\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n\r\n    fetch(\r\n      `https://localhost:44388/Porudzbina/allPorudzbineProdavcaNove?korisnikId=${decodedToken[\"Id\"]}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setPorudzbine(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n\r\n      dobaviGeoKoordinate(porudzbine);\r\n\r\n      var temp = porudzbineDisplay.map(function(porudzbina) {\r\n        return {\r\n          id: porudzbina.id,\r\n          geocode: [porudzbina.latitude, porudzbina.longitude]\r\n        };\r\n      });\r\n\r\n      //console.log(\"Porudzbine display: \"+porudzbineDisplay);\r\n      //console.log(temp);\r\n      setFinal(temp);\r\n\r\n      //console.log(\"FINALLLLLLLLLLLLLLLLLLLLLLL: \"+ JSON.stringify(final));\r\n  }, []);\r\n\r\n  return (\r\n    <MapContainer center={[45.267136, 19.833549]} zoom={13}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n\r\n      {final.map((marker) => (\r\n        <Marker key={marker.id} position={marker.geocode} icon={customIcon}>\r\n          <Popup>\r\n            <p></p>\r\n            <button>Posalji porudzbinu</button>\r\n          </Popup>\r\n        </Marker>\r\n      ))}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default Mapa;\r\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,SAAS;AAC9B,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,0BAA0B;AACjC,OAAO,yBAAyB;AAChC,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,iBAAiB,EAAEC,oBAAoB,CAAC,GAACf,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAACjB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMkB,OAAO,GAAG,EAAE;EAClB,MAAMC,UAAU,GAAG,IAAIrB,IAAI,CAAC;IAC1BsB,OAAO,EAAEC,OAAO,CAAC,2BAA2B,CAAC;IAC7CC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,CAAC;;EAEF;EACA,SAASC,oBAAoBA,CAACC,OAAO,EAAE;IACrCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACpB,MAAMG,YAAY,GAAI,4DAA2DC,kBAAkB,CACjGJ,OACF,CAAE,EAAC;IAEH,OAAOK,KAAK,CAACF,YAAY,CAAC,CACvBG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIA,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3BT,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;QACjB,MAAME,WAAW,GAAGF,IAAI,CAAC,CAAC,CAAC;QAC3B,MAAMG,QAAQ,GAAGC,UAAU,CAACF,WAAW,CAACG,GAAG,CAAC;QAC5C,MAAMC,SAAS,GAAGF,UAAU,CAACF,WAAW,CAACK,GAAG,CAAC;QAE7Cf,OAAO,CAACC,GAAG,CAAC,CAAC;QAEb,OAAO;UAAEU,QAAQ;UAAEG;QAAU,CAAC;MAChC,CAAC,MAAM;QACLd,OAAO,CAACgB,KAAK,CAAC,wBAAwB,CAAC;QACvC,OAAO,IAAI;MACb;IACF,CAAC,CAAC,CACDC,KAAK,CAAED,KAAK,IAAK;MAChBhB,OAAO,CAACgB,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO,IAAI;IACb,CAAC,CAAC;EACN;EAEA,SAASE,mBAAmBA,CAAC/B,UAAU,EAAE;IACvC,IAAIgC,oBAAoB,GAAGhC,UAAU,CAACiC,GAAG,CAAC,UAASC,UAAU,EAAE;MAC7D,OAAO;QACLC,EAAE,EAAED,UAAU,CAACC,EAAE;QACjBC,aAAa,EAAEF,UAAU,CAACE;MAC5B,CAAC;IACH,CAAC,CAAC;;IAEF;;IAEA,MAAMlC,iBAAiB,GAAG,EAAE;;IAE5B;IACAmC,OAAO,CAACC,GAAG,CACTN,oBAAoB,CAACC,GAAG,CAAC,MAAOC,UAAU,IAAK;MAC7C,MAAM;QAAEC,EAAE;QAAEC;MAAc,CAAC,GAAGF,UAAU;MACxC,MAAMK,OAAO,GAAG,MAAM5B,oBAAoB,CAACyB,aAAa,GAAG,oBAAoB,CAAC;MAEhF,IAAIG,OAAO,EAAE;QACXrC,iBAAiB,CAACsC,IAAI,CAAC;UACrBL,EAAE,EAAEA,EAAE;UACNX,QAAQ,EAAEe,OAAO,CAACf,QAAQ;UAC1BG,SAAS,EAAEY,OAAO,CAACZ;QACrB,CAAC,CAAC;MACJ;IACF,CAAC,CACH,CAAC,CAACT,IAAI,CAAC,MAAM;MACX;IAAA,CACD,CAAC;IAEFf,oBAAoB,CAACD,iBAAiB,CAAC;EACzC;EAEAb,SAAS,CAAC,MAAM;IACd,IAAIoD,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,MAAMC,YAAY,GAAGrD,SAAS,CAACkD,KAAK,CAAC;IAErCxB,KAAK,CACF,2EAA0E2B,YAAY,CAAC,IAAI,CAAE,EAAC,EAC/F;MACEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASN,KAAM;MACjC,CAAC;MACDO,IAAI,EAAE;IACR,CACF,CAAC,CACE9B,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdR,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;MACjBpB,aAAa,CAACoB,IAAI,CAAC;IACrB,CAAC,CAAC,CACDS,KAAK,CAAED,KAAK,IAAK;MAChBhB,OAAO,CAACgB,KAAK,CACX,kDAAkD,EAClDA,KACF,CAAC;IACH,CAAC,CAAC;IAEFE,mBAAmB,CAAC/B,UAAU,CAAC;IAE/B,IAAIiD,IAAI,GAAG/C,iBAAiB,CAAC+B,GAAG,CAAC,UAASC,UAAU,EAAE;MACpD,OAAO;QACLC,EAAE,EAAED,UAAU,CAACC,EAAE;QACjBe,OAAO,EAAE,CAAChB,UAAU,CAACV,QAAQ,EAAEU,UAAU,CAACP,SAAS;MACrD,CAAC;IACH,CAAC,CAAC;;IAEF;IACA;IACAtB,QAAQ,CAAC4C,IAAI,CAAC;;IAEd;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpD,OAAA,CAACL,YAAY;IAAC2D,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAE;IAACC,IAAI,EAAE,EAAG;IAAAC,QAAA,gBACrDxD,OAAA,CAACJ,SAAS;MACR6D,WAAW,EAAC,yFAAyF;MACrGC,GAAG,EAAC;IAAgD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC,EAEDvD,KAAK,CAAC6B,GAAG,CAAE2B,MAAM,iBAChB/D,OAAA,CAACH,MAAM;MAAiBmE,QAAQ,EAAED,MAAM,CAACV,OAAQ;MAACY,IAAI,EAAEvD,UAAW;MAAA8C,QAAA,eACjExD,OAAA,CAACF,KAAK;QAAA0D,QAAA,gBACJxD,OAAA;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACP9D,OAAA;UAAAwD,QAAA,EAAQ;QAAkB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC,GAJGC,MAAM,CAACzB,EAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKd,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnB,CAAC;AAAC5D,EAAA,CArIID,IAAI;AAAAiE,EAAA,GAAJjE,IAAI;AAuIV,eAAeA,IAAI;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}