[{"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\index.js":"1","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\App.js":"2","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\reportWebVitals.js":"3","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PocetnaStranica.js":"4","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\UlogovanKorisnik.js":"5","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Registracija.js":"6","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DodavanjeArtikla.js":"7","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Logovanje.js":"8","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Profil.js":"9","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrethodnePorudzbine.js":"10","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\StarePorudzbine.js":"11","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\NovePorudzbine.js":"12","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Verifikacija.js":"13","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PregledArtikala.js":"14","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrikazVerifikacija.js":"15","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\SvePorudzbine.js":"16","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\helpers\\ProtectedRoute.js":"17","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DetaljiArtikla.js":"18","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Korpa.js":"19","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\ArtikalService.js":"20","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\KorisnikService.js":"21","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Mapa.js":"22","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\MapaService.js":"23","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PaypalCheckoutButton.js":"24"},{"size":554,"mtime":1692096003086,"results":"25","hashOfConfig":"26"},{"size":3116,"mtime":1694550259128,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1692096003086,"results":"28","hashOfConfig":"26"},{"size":543,"mtime":1694369918568,"results":"29","hashOfConfig":"26"},{"size":5547,"mtime":1694459444057,"results":"30","hashOfConfig":"26"},{"size":13167,"mtime":1692800123962,"results":"31","hashOfConfig":"26"},{"size":11761,"mtime":1694783124079,"results":"32","hashOfConfig":"26"},{"size":4194,"mtime":1692700015997,"results":"33","hashOfConfig":"26"},{"size":11620,"mtime":1692703615537,"results":"34","hashOfConfig":"26"},{"size":9469,"mtime":1694457933835,"results":"35","hashOfConfig":"26"},{"size":4207,"mtime":1692729474087,"results":"36","hashOfConfig":"26"},{"size":2478,"mtime":1694381197636,"results":"37","hashOfConfig":"26"},{"size":7154,"mtime":1692800964550,"results":"38","hashOfConfig":"26"},{"size":17577,"mtime":1694690039217,"results":"39","hashOfConfig":"26"},{"size":3866,"mtime":1692535774717,"results":"40","hashOfConfig":"26"},{"size":5383,"mtime":1692313251405,"results":"41","hashOfConfig":"26"},{"size":973,"mtime":1692096003086,"results":"42","hashOfConfig":"43"},{"size":904,"mtime":1692790086687,"results":"44","hashOfConfig":"26"},{"size":904,"mtime":1692715997412,"results":"45","hashOfConfig":"26"},{"size":751,"mtime":1692096003086,"results":"46","hashOfConfig":"26"},{"size":790,"mtime":1692096003086,"results":"47","hashOfConfig":"26"},{"size":5569,"mtime":1694594288472,"results":"48","hashOfConfig":"26"},{"size":144,"mtime":1694375137739,"results":"49","hashOfConfig":"26"},{"size":2340,"mtime":1694639797735,"results":"50","hashOfConfig":"26"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"17ggdq0",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b92ind",{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"54"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"54"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\index.js",[],[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\App.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\reportWebVitals.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PocetnaStranica.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\UlogovanKorisnik.js",["134"],[],"import { Link } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport \"../../src/Pocetna.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst centerContentStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  minHeight: \"100vh\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst linkStyle = {\r\n  margin: \"10px 0\",\r\n  textDecoration: \"none\",\r\n  padding: \"10px 20px\",\r\n  borderRadius: \"5px\",\r\n};\r\n\r\n\r\n\r\nconst UlogovanKorisnik = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const getUserRole = () => {\r\n    var token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      try {\r\n        const decodedToken = jwtDecode(token);\r\n        return decodedToken[\r\n          \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"\r\n        ];\r\n      } catch (error) {\r\n        console.error(\"Error decoding token:\", error);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  const getUserVerification = () => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    return decodedToken[\"Verifikovan\"];\r\n  };\r\n\r\n  var role = getUserRole();\r\n  var verification = getUserVerification();\r\n  console.log(role);\r\n  console.log(verification);\r\n\r\n  const commonLinkStyle = {\r\n    textDecoration: \"none\",\r\n    fontSize: \"18px\",\r\n    marginBottom: \"10px\",\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\"); // Uklonite token iz lokalnog skladišta\r\n    navigate(\"/logovanje\");\r\n    // Preusmerite na stranicu za prijavu\r\n  };\r\n\r\n  return (\r\n    <div style={centerContentStyle}>\r\n      <h1 className=\"page-title\">Pocetna stranica</h1>\r\n\r\n      {(role === \"Kupac\" || role === \"Prodavac\" || role === \"Admin\") && (\r\n        <div className=\"link-section\">\r\n          <>\r\n            <Link\r\n              to=\"/ulogovan-korisnik/profil\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Profil\r\n            </Link>\r\n            <p></p>\r\n          </>\r\n        </div>\r\n      )}\r\n      {role === \"Kupac\" && (\r\n        <>\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/pregled-artikala\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Nova porudzbina\r\n            </Link>\r\n            <p></p>\r\n          </div>\r\n\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/prethodne-porudzbine\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Prethodne porudzbine\r\n            </Link>\r\n            <p></p>\r\n          </div>\r\n          <p></p>\r\n          <div>\r\n            <button className=\"crveno-dugme\"\r\n              type=\"button\"\r\n              color=\"red\"\r\n              onClick={handleLogout} // Dodajte onClick event koji poziva handleLogout funkciju\r\n            >\r\n              Odjavi se\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {role === \"Prodavac\" && verification === \"True\" && (\r\n        <>\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/dodaj-artikal\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Dodaj artikal\r\n            </Link>\r\n          </div>\r\n          <p></p>\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/moje-porudzbine\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Moje porudzbine\r\n            </Link>\r\n          </div>\r\n          <p></p>\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/nove-porudzbine\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Nove porudzbine\r\n            </Link>\r\n          </div>\r\n          <p></p>\r\n\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/mapa\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Mapa\r\n            </Link>\r\n          </div>\r\n          <p></p>\r\n          <p></p>\r\n          <div>\r\n            <button className=\"crveno-dugme\"\r\n              type=\"button\"\r\n              color=\"red\"\r\n              onClick={handleLogout} // Dodajte onClick event koji poziva handleLogout funkciju\r\n            >\r\n              Odjavi se\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {role === \"Admin\" && (\r\n        <>\r\n          <div className=\"link-section\">\r\n            <Link\r\n              to=\"/ulogovan-korisnik/verifikacija\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Verifikacija\r\n            </Link>\r\n          </div>\r\n          <div className=\"link-section\">\r\n            <p></p>\r\n            <Link\r\n              to=\"/ulogovan-korisnik/sve-porudzbine\"\r\n              style={{ ...commonLinkStyle, color: \"#007bff\" }}\r\n            >\r\n              Sve porudzbine\r\n            </Link>\r\n          </div>\r\n          <p></p>\r\n          <div>\r\n            <button className=\"crveno-dugme\"\r\n              type=\"button\"\r\n              color=\"red\"\r\n              onClick={handleLogout} // Dodajte onClick event koji poziva handleLogout funkciju\r\n            >\r\n              Odjavi se\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UlogovanKorisnik;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Registracija.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148"],[],"import React, { useState,useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ImageUploader from \"../services/ArtikalService\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { isPast, differenceInYears } from \"date-fns\";\r\n\r\nconst Registracija = () => {\r\n  const navigate = useNavigate();\r\n  const [showNotification, setShowNotification] = useState(false);\r\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\r\n  const [notificationVisible, setNotificationVisible] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isValid, setIsValid] = useState(true);\r\n  const [isTypingDate, setIsTypingDate] = useState(false);\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\r\n  const [isPasswordMatch, setIsPasswordMatch] = useState(true);\r\n  const [selectDate, setDate] = useState(\"\");\r\n  const [selectPicture, setPicture] = useState(\"\");\r\n  const [UploadedImage, setUploadedImage] = useState(null);\r\n  const [slikaKorisnika, setSlikaKorisnika] = useState(\"\");\r\n  const [tipKorisnika, setTipKorisnika] = useState(0);\r\n  const [postarina, setPostarina] = useState(0);\r\n\r\n  const [user, setUser] = useState({});\r\n\r\n  const [formData, setFormData] = useState({\r\n    KorisnickoIme: \"\",\r\n    Email: \"\",\r\n    Lozinka: \"\",\r\n    Ime: \"\",\r\n    Prezime: \"\",\r\n    DatumRodjenja: \"2000-01-01\",\r\n    Adresa: \"\",\r\n    TipKorisnika: \"Kupac\",\r\n    SlikaKorisnika: \"\",\r\n    Verifikovan: false,\r\n    Postarina: 0,\r\n  });\r\n\r\n  function handleCallbackResponse(response){\r\n    var userObject = jwtDecode(response.credential);\r\n    var prezime = userObject.family_name;\r\n    var slikaKorisnika = userObject.picture;\r\n    var email = userObject.email;\r\n    var ime = userObject.given_name;\r\n\r\n    setUser(userObject);\r\n    document.getElementById(\"signInDiv\").hidden = true;\r\n    var dropdown = document.getElementById(\"mojDropdown\");\r\n    console.log(dropdown.value);\r\n      //slanje zahteva POST na server\r\n      fetch(\r\n        `https://localhost:44388/Korisnik/getKorisnikToken?email=${email}&ime=${ime}&prezime=${prezime}&slikaKorisnika=${slikaKorisnika}&tipKorisnika=${dropdown.value}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\",\r\n        }\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          console.log(\"Response from server:\", data);\r\n          var jwtToken = data[\"token\"];\r\n          localStorage.setItem(\"token\", jwtToken);\r\n          \r\n          window.location.href = \"/ulogovan-korisnik/profil\";\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error occurred:\", error);\r\n        });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n      /* global google */\r\n      google.accounts.id.initialize({\r\n        client_id:\r\n        \"220695539326-hv8bcrgthi6ikj1sf0n1g2j2grbc4v9d.apps.googleusercontent.com\",\r\n        callback: handleCallbackResponse,\r\n      });\r\n  \r\n      google.accounts.id.renderButton(document.getElementById(\"signInDiv\"), {\r\n        theme: \"outline\",\r\n        size: \"large\",\r\n      });\r\n    //google.accounts.id.prompt();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"TipKorisnika\") {\r\n      if (value === \"Kupac\") {\r\n        setTipKorisnika(0);\r\n      } else if (value === \"Prodavac\") {\r\n        setTipKorisnika(1);\r\n      }\r\n    }\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      SlikaKorisnika: e.target.files[0],\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    //dalje logika za slanje na server\r\n    let temp = 0;\r\n    if (tipKorisnika === \"Prodavac\") {\r\n      temp = 1;\r\n    } else if (tipKorisnika === \"Kupac\") {\r\n      temp = 0;\r\n    }\r\n    console.log(\r\n      JSON.stringify({\r\n        ...formData,\r\n        DatumRodjenja: selectDate,\r\n        SlikaKorisnika: slikaKorisnika,\r\n        TipKorisnika: temp,\r\n      })\r\n    );\r\n    \r\n    const prodavac = {\r\n      KorisnikId: \"Registracija(WEB2)\",\r\n      Body:\r\n        \"Postovani, uskoro cete primiti jos jedan mejl da Vas obavestimo o verifikaciji vaseg naloga.\",\r\n    };\r\n\r\n\r\n    fetch(\"https://localhost:44388/Korisnik\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        ...formData,\r\n        DatumRodjenja: selectDate,\r\n        SlikaKorisnika: slikaKorisnika,\r\n        TipKorisnika: temp,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((Response) => Response.json())\r\n      .then((data) => {\r\n        console.log(\"POSLALI SMO NA BEK\");\r\n        console.log(\r\n          \"Sta je bek vratio nakon kreiranja korisnika: \" + JSON.stringify(data)\r\n        );\r\n        var reply=data;\r\n        console.log(reply.id);\r\n        if(formData.TipKorisnika === \"Prodavac\"){\r\n\r\n          const prodavac = {\r\n            korisnikId: reply.id,\r\n            postarina: reply.postarina,\r\n            verifikovan: reply.verifikovan,\r\n            artikli: []\r\n          };\r\n\r\n          fetch(\"https://localhost:44388/Prodavac\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(prodavac),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            mode: \"cors\",\r\n          })\r\n          .then((Response)=>Response.json())\r\n          .then((data)=>{\r\n            console.log(\"ODgovor beka na post Prodavac:\");\r\n            console.log(JSON.stringify(data));\r\n          })\r\n          .catch((error)=>{\r\n            console.log(\"Greska prilikom createProdavca greska: \"+ error);\r\n          })\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    //}, 2000);\r\n    //});\r\n\r\n    if (formData.TipKorisnika === \"Prodavac\") {\r\n      setNotificationMessage(\r\n        \"Registracija je uspešno zabeležena. Sačekajte da se obradi. O uspesnoj registraciji bicete obavesteni putem e-mail adrese...\"\r\n      );\r\n      setShowNotification(true);\r\n\r\n      const emailData = {\r\n        Receiver: email,\r\n        Subject: \"Registracija(WEB2)\",\r\n        Body:\r\n          \"Postovani, uskoro cete primiti jos jedan mejl da Vas obavestimo o verifikaciji vaseg naloga.\",\r\n      };\r\n      console.log(JSON.stringify(emailData));\r\n\r\n      \r\n      fetch(\r\n        //pre fetch ide await\r\n        \"https://localhost:44388/Email/emailService\",\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(emailData),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\",\r\n        }\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(\"POGODILI BEK.\");\r\n          \r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      setNotificationVisible(true);\r\n\r\n      setTimeout(() => {\r\n        setNotificationVisible(false);\r\n        navigate(\"/logovanje\");\r\n      }, 5000); // 5000 milisekundi = 5 sekundi\r\n    } else {\r\n      navigate(\"/logovanje\");\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = (imageData) => {\r\n    setUploadedImage(imageData);\r\n    setSlikaKorisnika(imageData);\r\n  };\r\n  const handlePasswordConfirmationChange = (e) => {\r\n    const confirmationValue = e.target.value;\r\n    setPasswordConfirmation(confirmationValue);\r\n\r\n    if (confirmationValue === formData.Lozinka) {\r\n      setIsPasswordMatch(true);\r\n    } else {\r\n      setIsPasswordMatch(false);\r\n    }\r\n  };\r\n  const handleDateChange = (e) => {\r\n    handleChange(e); // Prvo pozivamo handleChange funkciju da se ažurira formData\r\n    setDate(e.target.value);\r\n  };\r\n  const handleTipChange = (e) => {\r\n    handleChange(e);\r\n    setTipKorisnika(e.target.value);\r\n  };\r\n  const handlePostarinaChange = (e) => {\r\n    handleChange(e);\r\n    setPostarina(e.target.value);\r\n  };\r\n  const handleEmailChange = (e) => {\r\n    handleChange(e);\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container text-center mt-5\">\r\n      <h1 style={{ color: \"#28a745\" }}>Registracija</h1>\r\n      <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"korisnickoIme\">Korisničko ime:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"korisnickoIme\"\r\n          name=\"KorisnickoIme\"\r\n          value={formData.KorisnickoIme}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"email\">E-mail adresa:</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          name=\"Email\"\r\n          value={formData.Email}\r\n          onChange={handleEmailChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"lozinka\">Lozinka:</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"lozinka\"\r\n          name=\"Lozinka\"\r\n          value={formData.Lozinka}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"potvrdaLozinke\">Potvrdi lozinku:</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"potvrdaLozinke\"\r\n          name=\"PotvrdaLozinke\"\r\n          value={passwordConfirmation}\r\n          onChange={handlePasswordConfirmationChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        {!isPasswordMatch && (\r\n          <div style={{ color: \"red\" }}>Lozinke se ne podudaraju.</div>\r\n        )}\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"ime\">Ime:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"ime\"\r\n          name=\"Ime\"\r\n          value={formData.Ime}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"prezime\">Prezime:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"prezime\"\r\n          name=\"Prezime\"\r\n          value={formData.Prezime}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"datumRodjenja\">Datum rođenja:</label>\r\n        <input type=\"date\" value={selectDate} onChange={handleDateChange} className=\"form-control\" />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"adresa\">Adresa:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"adresa\"\r\n          name=\"Adresa\"\r\n          value={formData.Adresa}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"TipKorisnika\">Tip korisnika:</label>\r\n        <select\r\n          id=\"tipKorisnika\"\r\n          name=\"TipKorisnika\"\r\n          value={formData.TipKorisnika}\r\n          onChange={handleTipChange}\r\n          className=\"form-control\"\r\n          required\r\n        >\r\n          <option value=\"Kupac\">Kupac</option>\r\n          <option value=\"Prodavac\">Prodavac</option>\r\n        </select>\r\n        <br />\r\n        </div>\r\n\r\n        {formData.TipKorisnika === \"Prodavac\" && (\r\n          <div>\r\n            <div className=\"form-group\">\r\n            <label htmlFor=\"postarina\">Postarina:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"postarina\"\r\n              name=\"Postarina\"\r\n              value={formData.Postarina}\r\n              onChange={handlePostarinaChange}\r\n              className=\"form-control\"\r\n              required\r\n            />\r\n            <br />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"slika\">Slika profila:</label>\r\n        <ImageUploader onImageUpload={handleImageUpload} className=\"form-control mr-2\" />\r\n        \r\n        \r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <button type=\"submit\" className=\"btn btn-success mt-3\">Registruj se</button>\r\n      </form>\r\n\r\n      {showNotification && (\r\n        <div className=\"notification\" style={{ background: \"#d4edda\", color: \"#155724\" }}>{notificationMessage}</div>\r\n      )}\r\n      <br/>\r\n      \r\n      <div>\r\n\r\n        <div className=\"mt-4\">\r\n          <h1 style={{ color: \"#28a745\" }}>Prijavite se preko google naloga</h1>\r\n          <select id=\"mojDropdown\">\r\n            <option value=\"Kupac\">Kupac</option>\r\n            <option value=\"Prodavac\">Prodavac</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center align-items-center mt-3\">\r\n        <div id=\"signInDiv\"> \r\n        </div>\r\n        </div>\r\n      \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Registracija;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DodavanjeArtikla.js",["149","150","151"],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Logovanje.js",["152","153"],[],"import jwtDecode from \"jwt-decode\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Logovanje = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [isLoginFailed, setIsLoginFailed] = useState(false);\r\n  const [user, setUser] = useState({});\r\n\r\n  const [formData, setFormData] = useState({\r\n    Username: \"\",\r\n    Lozinka: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Form data submitted:\", formData);\r\n    fetch(\"https://localhost:44388/Korisnik/logovanje\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(formData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        console.log(\"Response from server:\", data);\r\n        var jwtToken = data[\"token\"];\r\n        localStorage.setItem(\"token\", jwtToken);\r\n        navigate(\"/ulogovan-korisnik\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error occurred:\", error);\r\n      });\r\n  };\r\n  function handleCallbackResponse(response) {\r\n    var userObject = jwtDecode(response.credential);\r\n    var prezime = userObject.family_name;\r\n    var ime = userObject.given_name;\r\n\r\n    setUser(userObject);\r\n    document.getElementById(\"signInDiv\").hidden = true;\r\n    \r\n\r\n    const logovanjeDto = {\r\n      username: ime,\r\n      lozinka: prezime,\r\n    };\r\n    console.log(logovanjeDto);\r\n    //slanje zahteva POST na server\r\n    fetch(`https://localhost:44388/Korisnik/logovanje`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(logovanjeDto),\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        console.log(\"Response from server:\", data);\r\n        var jwtToken = data[\"token\"];\r\n        localStorage.setItem(\"token\", jwtToken);\r\n        //setTemp(true);\r\n        //setRequestCompleted((prevRequestCompleted) => true);\r\n        //console.log(requestCompleted);\r\n        window.location.href = \"/ulogovan-korisnik/profil\";\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error occurred:\", error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    /* global google */\r\n    google.accounts.id.initialize({\r\n      client_id:\r\n        \"220695539326-hv8bcrgthi6ikj1sf0n1g2j2grbc4v9d.apps.googleusercontent.com\",\r\n      callback: handleCallbackResponse,\r\n    });\r\n\r\n    google.accounts.id.renderButton(document.getElementById(\"signInDiv\"), {\r\n      theme: \"outline\",\r\n      size: \"large\",\r\n    });\r\n    google.accounts.id.prompt();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container text-center mt-5\">\r\n      <h1 style={{ color: \"#007bff\" }}>Logovanje</h1>\r\n      <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"text\">Username:</label>\r\n        <input\r\n          type=\"username\"\r\n          id=\"username\"\r\n          name=\"Username\"\r\n          value={formData.Username}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"lozinka\">Lozinka:</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"lozinka1\"\r\n          name=\"Lozinka\"\r\n          value={formData.Lozinka}\r\n          onChange={handleChange}\r\n          className=\"form-control\"\r\n          required\r\n        />\r\n        <br />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">Uloguj se</button>\r\n      </form>\r\n      {isLoginFailed && (\r\n        <p className=\"text-danger mt-3\">Neuspesno logovanje. Proverite vase podatke i pokusajte ponovo.</p>\r\n      )}\r\n      <div className=\"d-flex justify-content-center align-items-center mt-3\">\r\n      <div id=\"signInDiv\"> \r\n        </div>\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logovanje;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Profil.js",["154"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport ImageUploader from \"../services/KorisnikService\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//testiramo dal se komituje na master\r\n\r\nconst Profil = () => {\r\n  const [formData, setFormData] = useState({\r\n    korisnickoIme: \"\",\r\n    email: \"\",\r\n    lozinka: \"\",\r\n    ime: \"\",\r\n    prezime: \"\",\r\n    datumRodjenja: \"2000-01-01\",\r\n    adresa: \"\",\r\n    tipKorisnika: 0,\r\n    slikaKorisnika: \"\",\r\n    verifikovan: true,\r\n    postarina: 0,\r\n  });\r\n\r\n  //state za cuvanje podatka sa server\r\n  const [korisnikPodaci, setKorisnikPodaci] = useState(null);\r\n\r\n  //state za cuvanje tipaKorisnika\r\n  const tipRef = useRef(0);\r\n  const postarinaRef = useRef(0);\r\n\r\n  const formRef = useRef(null);\r\n\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\r\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  //rad sa slikom\r\n  const [UploadedImage, setUploadedImage] = useState(null);\r\n  const handleImageUpload = (imageData) => {\r\n    setUploadedImage(imageData);\r\n  };\r\n\r\n  var token = localStorage.getItem(\"token\");\r\n  const decodedToken = jwtDecode(token);\r\n  console.log(decodedToken[\"Id\"]);\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://localhost:44388/Korisnik?idKorisnika=${decodedToken[\"Id\"]}`,\r\n      {\r\n        //zakucala jednog korisnika\r\n        method: \"GET\",\r\n        // body: JSON.stringify(formData), //ne mogu slati body u get zahtevu\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((Response) => Response.json())\r\n      .then((data) => {\r\n        //obrada odgovora servera\r\n        console.log(data);\r\n        tipRef.current = data.tipKorisnika;\r\n        postarinaRef.current = data.postarinaRef;\r\n        //foramtiranje datuma\r\n        const datumRodjenja = data.datumRodjenja; //2023-07-25T00:00:00\r\n        const formattedDateString = datumRodjenja.split(\"T\")[0];\r\n        data.datumRodjenja = formattedDateString;\r\n        //console.log(formattedDateString+\" ******db->forma\");\r\n        setKorisnikPodaci(data);\r\n        setFormData(data);\r\n      })\r\n      .catch((error) => {\r\n        //obrada greske\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n\r\n    if (name === \"lozinka\") {\r\n      // Ako se menja polje za šifru, ažuriraj i polje za potvrdu šifre\r\n      setPasswordConfirmation(\"\");\r\n    }\r\n  };\r\n\r\n  const handlePasswordConfirmationChange = (e) => {\r\n    const confirmedPassword = e.target.value;\r\n    setPasswordConfirmation(e.target.value);\r\n\r\n    // Proveri da li unete šifre i potvrda šifre odgovaraju\r\n    if (formData.lozinka === confirmedPassword) {\r\n      setPasswordsMatch(true);\r\n    } else {\r\n      setPasswordsMatch(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Fetch zahtev za slanje izmenjenih podataka na server\r\n    //formatiranje datuma za slanje nazad serveru\r\n    if (formData.lozinka !== passwordConfirmation) {\r\n      console.log(\"Šifre se ne podudaraju.\");\r\n      return;\r\n    }\r\n\r\n    const zaKonvertovanje = formData.datumRodjenja; //\"28-7-2023\"\r\n    const formattedDateString = zaKonvertovanje + \"T23:00:00.000Z\";\r\n\r\n    const formDataToSend = {\r\n      korisnickoIme: formRef.current.korisnickoIme.value,\r\n      email: formRef.current.email.value,\r\n      lozinka: formRef.current.lozinka.value,\r\n      ime: formRef.current.ime.value,\r\n      prezime: formRef.current.prezime.value,\r\n      datumRodjenja: formattedDateString,\r\n      adresa: formRef.current.adresa.value,\r\n      tipKorisnika: tipRef.current.value,\r\n      slikaKorisnika: UploadedImage,\r\n      postarina: postarinaRef.current,\r\n    };\r\n\r\n    fetch(\r\n      `https://localhost:44388/Korisnik?idKorisnika=${decodedToken[\"Id\"]}`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(formDataToSend),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Podaci su uspešno poslati na server:\", data);\r\n        setIsSuccess(true);\r\n      })\r\n      .catch((error) => {\r\n        // Obrada greške\r\n        console.error(\"Greška prilikom slanja podataka na server:\", error);\r\n        setIsSuccess(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-6\">\r\n          <h2 className=\"mb-4\" style={{ color: \"#279980\" }}>\r\n            Profil\r\n          </h2>\r\n          {korisnikPodaci ? (\r\n            <form onSubmit={handleSubmit} ref={formRef} className=\"mt-4\">\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Korisnicko ime:\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"korisnickoIme\"\r\n                    value={formData.korisnickoIme}\r\n                    className=\"form-control\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  E-mail:\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Lozinka:\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"lozinka\"\r\n                    value={formData.lozinka}\r\n                    onChange={handleChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Potvrda lozinke:\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"potvrdaLozinke\"\r\n                    value={passwordConfirmation}\r\n                    onChange={handlePasswordConfirmationChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  {passwordsMatch ? null : (\r\n                    <p className=\"text-danger\">Šifre se ne podudaraju.</p>\r\n                  )}\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Ime:\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"ime\"\r\n                    value={formData.ime}\r\n                    onChange={handleChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Prezime:\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"prezime\"\r\n                    value={formData.prezime}\r\n                    onChange={handleChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Datum rodjenja:\r\n                  <input\r\n                    type=\"date\"\r\n                    name=\"datumRodjenja\"\r\n                    value={formData.datumRodjenja}\r\n                    onChange={handleChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Adresa:\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"adresa\"\r\n                    value={formData.adresa}\r\n                    onChange={handleChange}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Slika:\r\n                  <ImageUploader\r\n                    onImageUpload={handleImageUpload}\r\n                    className=\"form-control\"\r\n                  />\r\n                  <p></p>\r\n                </label>\r\n              </div>\r\n              {formData.tipKorisnika === \"Prodavac\" && (\r\n                <div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"postarina\">Postarina:</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      id=\"postarina\"\r\n                      name=\"postarina\"\r\n                      value={formData.postarina}\r\n                      onChange={handleChange}\r\n                      className=\"form-control\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <br />\r\n                </div>\r\n              )}\r\n              <button type=\"submit\" className=\"btn btn-success\">\r\n                Sacuvaj izmene\r\n              </button>\r\n              {isSuccess && (\r\n                <p className=\"text-success\">Podaci su uspešno ažurirani!</p>\r\n              )}\r\n            </form>\r\n          ) : (\r\n            <p>Ucitavanje podataka...</p>\r\n          )}\r\n          <br />\r\n          <br />\r\n        </div>\r\n\r\n        <div className=\"col-lg-6\">\r\n          <div className=\"user-details\">\r\n            <h3 style={{ color: \"#279980\" }}>Detalji korisnika</h3>\r\n            {korisnikPodaci && (\r\n              <div className=\"user-info\" style={{ border: \"1px solid #88d498\", padding: \"15px\", backgroundColor: \"#e6f7ea\" }}>\r\n                <p>\r\n                  <strong>Korisničko ime:</strong>{\" \"}\r\n                  {korisnikPodaci.korisnickoIme}\r\n                </p>\r\n                <p>\r\n                  <strong>Email:</strong> {korisnikPodaci.email}\r\n                </p>\r\n                <p>\r\n                  <strong>Ime:</strong> {korisnikPodaci.ime}\r\n                </p>\r\n                <p>\r\n                  <strong>Prezime:</strong> {korisnikPodaci.prezime}\r\n                </p>\r\n                <p>\r\n                  <strong>Datum rođenja:</strong> {korisnikPodaci.datumRodjenja}\r\n                </p>\r\n                <p>\r\n                  <strong>Adresa:</strong> {korisnikPodaci.adresa}\r\n                </p>\r\n                <p>\r\n                  <strong>Slika:                                  </strong>\r\n                  <img\r\n                    src={korisnikPodaci.slikaKorisnika}\r\n                    alt=\"Uploaded\"\r\n                    style={{ maxWidth: \"100px\" }}\r\n                  />\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <Link to=\"/ulogovan-korisnik\" className=\"mt-3\">Nazad na početnu stranicu</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profil;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrethodnePorudzbine.js",["155","156","157"],[],"import React, { useEffect, useState } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport \"../Artikli.css\";\r\n\r\nconst PrethodnePorudzbine = () => {\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState(\"naziv\");\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const [preostaloVreme, setPreostaloVreme] = useState({});\r\n\r\n  const [formData, setFormData] = useState({\r\n    korisnikId: 0,\r\n    adresaDostave: \"string\",\r\n    komentar: \"string\",\r\n    artikli: [\r\n      {\r\n        prodavacId: 0,\r\n        naziv: \"string\",\r\n        cena: 0,\r\n        kolicina: 0,\r\n        opis: \"string\",\r\n        slika: \"string\",\r\n      },\r\n    ],\r\n    vremeIsporuke: \"2000-18-06T18:48:23.437Z\",\r\n    isporucena: false\r\n  });\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date\r\n      .getDate()\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const year = date.getFullYear();\r\n    return `${day}-${month}-${year}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    var index = decodedToken[\"Id\"];\r\n    //console.log(decodedToken[\"Id\"]);\r\n\r\n    fetch(\r\n      `https://localhost:44388/Porudzbina/allPorudzbineKorisnika?idKorisnika=${index}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((responce) => responce.json())\r\n      .then((data) => {\r\n        //obrada odgovora servera\r\n        setPorudzbine(data);\r\n        console.log(data);\r\n        //console.log(data[0][\"vremeIsporuke\"]);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const filteredPorudzbine = porudzbine.filter((porudzbine) => {\r\n    return porudzbine.artikli.some((artikal) =>\r\n      artikal.naziv.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  });\r\n\r\n  const sortedPorudzbine = [...filteredPorudzbine];\r\n\r\n  if (sortOption === \"naziv\") {\r\n    sortedPorudzbine.sort((a, b) =>\r\n      a.artikli[0].naziv.localeCompare(b.artikli[0].naziv)\r\n    );\r\n  } else if (sortOption === \"datum\") {\r\n    sortedPorudzbine.sort((a, b) => {\r\n      console.log(JSON.stringify(sortedPorudzbine));\r\n      if (sortOrder === \"asc\") {\r\n        return new Date(a.vremeIsporuke) - new Date(b.vremeIsporuke);\r\n      } else {\r\n        return new Date(b.vremeIsporuke) - new Date(a.vremeIsporuke);\r\n      }\r\n    });\r\n  }\r\n  //u principu bih trebala da sortiram po datumu, to ima najvise smisla\r\n\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const endTimeMillis = new Date(endTime).getTime();\r\n    return Math.max(0, endTimeMillis - currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ... ostatak vašeg postojećeg useEffect-a ...\r\n\r\n    // Pokretanje intervala za ažuriranje preostalog vremena svake sekunde\r\n    const interval = setInterval(() => {\r\n      const updatedRemainingTimes = {};\r\n\r\n      porudzbine.forEach((porudzbina) => {\r\n        const remainingTime = calculateRemainingTime(porudzbina.vremeIsporuke);\r\n        updatedRemainingTimes[porudzbina.id] = remainingTime;\r\n      });\r\n\r\n      setPreostaloVreme(updatedRemainingTimes);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [porudzbine]);\r\n\r\n  // Funkcija za formatiranje preostalog vremena\r\n  const formatRemainingTime = (remainingTime) => {\r\n    const days = Math.floor(remainingTime / (24 * 60 * 60 * 1000));\r\n    const hours = Math.floor(\r\n      (remainingTime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)\r\n    );\r\n    const minutes = Math.floor(\r\n      (remainingTime % (60 * 60 * 1000)) / (60 * 1000)\r\n    );\r\n    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n\r\n  const otkaziPorudzbinu = (porudzbinaId) => {\r\n    const existingPorudzbina = porudzbine.find(\r\n      (item) => item.id === porudzbinaId\r\n    );\r\n    console.log(porudzbine);\r\n    console.log(\"JESMO LI DOBACILI DO OVDE\");\r\n    console.log(\"PORUDZBINA--------\" + porudzbinaId + \"+++++++++++\");\r\n    console.log(existingPorudzbina);\r\n\r\n    // const vremeIsporuke=porudzbinaZaOtkazivanje[\"vremeIsporuke\"];\r\n    // const vremePorucivanja=porudzbinaZaOtkazivanje[\"vremePorucivanja\"];\r\n\r\n    // console.log(vremeIsporuke+\"+++++++++++\"+vremePorucivanja);\r\n\r\n    if (existingPorudzbina) {\r\n      //otkazi porudzbinu\r\n      fetch(`https://localhost:44388/Porudzbina/cancelPorudzbina`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(existingPorudzbina),\r\n        mode: \"cors\",\r\n      })\r\n        .then((responce) => responce.json())\r\n        .then((data) => {\r\n          alert(\"Uspesno je otkazana porudzbina\");\r\n          console.log(data);\r\n        })\r\n        .catch((error) => {\r\n          alert(\"Greška prilikom otkazivanja porudzbine\");\r\n          console.error(\"Greška prilikom otkazivanja porudzbine\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  function otkazivanjeUPrvihSatVremena(id) {\r\n    const porudzbina = porudzbine.find((p) => p.id === id);\r\n\r\n    if (!porudzbina) {\r\n      console.log(\"Porudžbina sa datim ID nije pronađena\");\r\n      return false; // Porudžbina sa datim ID nije pronađena\r\n    }\r\n\r\n    const trenutnoVreme = new Date();\r\n    //console.log(\"Trenutno vreme: \"+ trenutnoVreme);\r\n    const satVremenaUnapred = new Date(\r\n      trenutnoVreme.getTime() + 60 * 60 * 1000\r\n    );\r\n    //console.log(\"Sat vremena unazad: \"+ satVremenaUnapred);\r\n    //console.log(porudzbina.vremePorucivanja >= satVremenaUnapred);\r\n    return porudzbina.vremePorucivanja >= satVremenaUnapred;\r\n  }\r\n\r\n  return (\r\n    <div className=\"prethodne-porudzbine\">\r\n      <h1 className=\"page-title\">Prethodne porudzbine</h1>\r\n      <div className=\"search-and-sort\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Unesite naziv artikla za pretragu\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n        <select\r\n          value={sortOption}\r\n          onChange={(e) => setSortOption(e.target.value)}\r\n        >\r\n          <option value=\"naziv\">Sortiraj po nazivu</option>\r\n          <option value=\"datum\">Sortiraj po datumu</option>\r\n        </select>\r\n        <button\r\n          className=\"sort-order-button\"\r\n          onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\r\n        >\r\n          {sortOrder === \"asc\"\r\n            ? \"Sortiraj po datumu (rastuce)\"\r\n            : \"Sortiraj po datumu (opadajuce)\"}\r\n        </button>\r\n      </div>\r\n\r\n      <table className=\"artikli-table\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"table-header\">Adresa dostave</th>\r\n            <th className=\"table-header\">Artikli</th>\r\n            <th className=\"table-header\">Komentar</th>\r\n            <th className=\"table-header\">Vreme isporuke</th>\r\n            <th className=\"table-header\">Otkazati?</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedPorudzbine\r\n            .filter((porudzbina) => !porudzbina.otkazana) //ne prikazuje otkazane porudzbine\r\n            .map((porudzbina) => (\r\n              <tr key={porudzbina.vremeIsporuke} className=\"artikal-row\">\r\n                <td>{porudzbina.adresaDostave}</td>\r\n                <td>\r\n                  {porudzbina.artikli.map((artikal) => (\r\n                    <div className=\"artikal-kartica\" key={artikal.Id}>\r\n                      <img\r\n                        src={artikal.slika}\r\n                        alt={artikal.naziv}\r\n                        className=\"artikal-slika\"\r\n                      />\r\n                      <p className=\"artikal-naziv\">{artikal.naziv}</p>\r\n                      <p className=\"artikal-cijena\">Cena: {artikal.cena}</p>\r\n                      <p className=\"artikal-opis\">Opis: {artikal.opis}</p>\r\n                    </div>\r\n                  ))}\r\n                </td>\r\n                <td className=\"otkazi-column\">{porudzbina.komentar}</td>\r\n                <td className=\"otkazi-column\">\r\n                  {porudzbina.isporucena\r\n                    ? preostaloVreme[porudzbina.id] > 0\r\n                      ? formatRemainingTime(preostaloVreme[porudzbina.id])\r\n                      : \"Isporuceno\"\r\n                    : \"Nije poslata porudzbina\"}\r\n                </td>\r\n                <td className=\"otkazi-column\">\r\n                  {!porudzbina.otkazana &&\r\n                    !otkazivanjeUPrvihSatVremena(porudzbina.id) &&\r\n                    preostaloVreme[porudzbina.id] > 0 && (\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"poruci-button\"\r\n                        onClick={() => {\r\n                          otkaziPorudzbinu(porudzbina.id);\r\n                        }}\r\n                      >\r\n                        Otkazi\r\n                      </button>\r\n                    )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrethodnePorudzbine;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\StarePorudzbine.js",["158"],[],"import React, { useEffect, useState } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst StarePorudzbine = () => {\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [preostaloVreme, setPreostaloVreme] = useState({});\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      hour12: false,\r\n    };\r\n    return new Date(dateString)\r\n      .toLocaleDateString(\"en-US\", options)\r\n      .replace(\",\", \"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n\r\n    fetch(\r\n      `https://localhost:44388/Porudzbina/allPorudzbineProdavcaStare?korisnikId=${decodedToken[\"Id\"]}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setPorudzbine(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(decodedToken[\"Id\"]);\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const endTimeMillis = new Date(endTime).getTime();\r\n    return Math.max(0, endTimeMillis - currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ... ostatak vašeg postojećeg useEffect-a ...\r\n\r\n    // Pokretanje intervala za ažuriranje preostalog vremena svake sekunde\r\n    const interval = setInterval(() => {\r\n      const updatedRemainingTimes = {};\r\n\r\n      porudzbine.forEach((porudzbina) => {\r\n        const remainingTime = calculateRemainingTime(porudzbina.vremeIsporuke);\r\n        updatedRemainingTimes[porudzbina.id] = remainingTime;\r\n      });\r\n\r\n      setPreostaloVreme(updatedRemainingTimes);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [porudzbine]);\r\n\r\n  const formatRemainingTime = (remainingTime) => {\r\n    const days = Math.floor(remainingTime / (24 * 60 * 60 * 1000));\r\n    const hours = Math.floor(\r\n      (remainingTime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)\r\n    );\r\n    const minutes = Math.floor(\r\n      (remainingTime % (60 * 60 * 1000)) / (60 * 1000)\r\n    );\r\n    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ color: \"#279980\" }}>Moje porudzbine</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th style={{ color: \"#279980\" }}>Adresa Dostave</th>\r\n            <th style={{ color: \"#279980\" }}>Komentar</th>\r\n            <th style={{ color: \"#279980\" }}>Vreme isporuke</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {porudzbine\r\n          .filter((porudzbina)=> !porudzbina.otkazana)\r\n          .map((porudzbina, index) => (\r\n            <tr key={index}>\r\n              <td>{porudzbina.adresaDostave}</td>\r\n              <td>{porudzbina.komentar}</td>\r\n              <td>\r\n                  {/* Prikaz preostalog vremena */}\r\n                  {preostaloVreme[porudzbina.id] > 0\r\n                    ? formatRemainingTime(preostaloVreme[porudzbina.id])\r\n                    : \"Isporuceno\"}\r\n                </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarePorudzbine;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\NovePorudzbine.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Verifikacija.js",["159"],[],"import React, { useState, useEffect } from \"react\";\r\nimport PrikazVerifikacija from \"./PrikazVerifikacija\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport \"../../src/Verifikacija.css\";\r\n\r\nconst Verifikacija = () => {\r\n  const [prodavac, setProdavce] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" };\r\n    return new Date(dateString)\r\n      .toLocaleDateString(\"en-US\", options)\r\n      .replace(/\\//g, \"-\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n    //slanje tokena u zaglavlju svakog zahteva\r\n\r\n    fetch(\"https://localhost:44388/Korisnik/neverProdavce\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`Network response was not ok.`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setProdavce(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greska prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleVerifikacija = (index, email) => {\r\n    // Implementirajte logiku za verifikaciju\r\n    console.log(`Verifikacija prodavca sa indeksom ${index}`);\r\n    setEmail(email);\r\n\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, vasa registracija je odobrena.\",\r\n    };\r\n\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n\r\n    fetch(`https://localhost:44388/Korisnik/verProdavca?idKorisnika=${index}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(index),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //ovde odradi fetch za post za slanje mejla\r\n        fetch(\"https://localhost:44388/Email/emailService\", {\r\n          body: JSON.stringify(emailData),\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          mode: \"cors\",\r\n        })\r\n          .then((Response) => Response.json())\r\n          .then((data) => {\r\n            console.log(\"Poslali mejl da smo validirali nalog.\");\r\n          })\r\n          .catch((error) => {\r\n            //obrada greske\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleOdbijVerifikaciju = (index, email) => {\r\n    // Implementirajte logiku za odbijanje verifikacije\r\n    console.log(`Odbijanje verifikacije prodavca sa indeksom ${index}`);\r\n\r\n    setEmail(email);\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, vasa registracija je odbijena.\",\r\n    };\r\n\r\n    var token = localStorage.getItem(\"token\");\r\n\r\n    fetch(\r\n      `https://localhost:44388/Korisnik/neverProdavca?idKorisnika=${index}`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(index),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //fetch za odbijanje verifikacije\r\n        fetch(\"https://localhost:44388/Email/emailService\", {\r\n          body: JSON.stringify(emailData),\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\",\r\n        })\r\n          .then((Response) => Response.json())\r\n          .then((data) => {\r\n            console.log(\"Poslali mejl da odbijemo validaciju.\");\r\n          })\r\n          .catch((error) => {\r\n            //obrada greske\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ color: \"#279980\" }}>\r\n        Prodavci koji cekaju na verifikaciju naloga\r\n      </h1>\r\n\r\n      {loading ? (\r\n        <p>Učitavanje...</p>\r\n      ) : prodavac.length === 0 ? (\r\n        <p>Trenutno nema korisnika koji cekaju na verifikaciju.</p>\r\n      ) : (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Slika</th>\r\n              <th>Korisnicko Ime</th>\r\n              <th>Ime</th>\r\n              <th>Prezime</th>\r\n              <th>Email</th>\r\n              <th>Datum rodjenja</th>\r\n              <th>Adresa</th>\r\n              <th>Postarina</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {prodavac.map((prodavac) => (\r\n              <tr key={prodavac.id}>\r\n                <td>\r\n                  <img\r\n                    src={prodavac.slikaKorisnika}\r\n                    alt=\"Ucitavnje slike\"\r\n                    style={{ width: \"100px\" }}\r\n                  />\r\n                </td>\r\n                <td>{prodavac.korisnickoIme}</td>\r\n                <td>{prodavac.ime}</td>\r\n                <td>{prodavac.prezime}</td>\r\n                <td>{prodavac.email}</td>\r\n                <td>{formatDate(prodavac.datumRodjenja)}</td>\r\n                <td>{prodavac.adresa}</td>\r\n                <td>{prodavac.postarina}</td>\r\n                <td>\r\n                  <button\r\n                    onClick={() =>\r\n                      handleVerifikacija(prodavac.id, prodavac.email)\r\n                    }\r\n                  >\r\n                    Verifikuj\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                  className=\"red-button\"\r\n                    onClick={() =>\r\n                      handleOdbijVerifikaciju(prodavac.id, prodavac.email)\r\n                    }\r\n                  >\r\n                    Odbij verifikaciju\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n      <div>\r\n        <br />\r\n        <PrikazVerifikacija />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Verifikacija;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PregledArtikala.js",["160","161","162","163","164","165","166","167","168","169","170"],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrikazVerifikacija.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\SvePorudzbine.js",["171","172"],[],"import React, { useEffect, useState } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst SvePorudzbine = () => {\r\n  var token = localStorage.getItem(\"token\");\r\n  const decodedToken = jwtDecode(token);\r\n  console.log(decodedToken[\"Id\"]);\r\n\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [korisnici, setKorisnike] = useState([]);\r\n  // Novo stanje za praćenje preostalog vremena\r\n  const [preostaloVreme, setPreostaloVreme] = useState({});\r\n\r\n  //funkcija koja nam formatira datum iz 2023-08-12T17:06:22.196 u 12-08-2023 17:06 i govori status\r\n  const formatDateGetStatus = (dateString, otkazana) => {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      hour12: false,\r\n    };\r\n\r\n    const date = new Date(dateString);\r\n    const currentTime = new Date();\r\n\r\n    if (date <= currentTime) {\r\n      return <span style={{ color: \"green\" }}>Isporuceno</span>;\r\n    } else if(otkazana){\r\n      return <span style={{ color: \"red\" }}>Otkazana</span>;\r\n    }else{\r\n      \r\n      return <span style={{ color: \"orange\" }}>U toku je isporuka...</span>;\r\n    }\r\n  };\r\n\r\n  //funcija koja na idKorisnika daje njegov username\r\n  const getUsernameKorisnika = (id) => {\r\n    const korisnik = korisnici.find((korisnik) => korisnik.id === id);\r\n    return korisnik ? korisnik.korisnickoIme : \"Nepoznat korisnik\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(`https://localhost:44388/Porudzbina/allPorudzbine`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setPorudzbine(data);\r\n        setLoading(false);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greska prilikom dohvatanja svih porudzbina sa servera.\");\r\n      });\r\n\r\n    fetch(`https://localhost:44388/Korisnik/allKorisnike`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Contetnt-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setKorisnike(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greska prilikom dohvatanja svih korisnika sa servera.\");\r\n      });\r\n  }, []);\r\n\r\n  // Funkcija za izračunavanje preostalog vremena\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const endTimeMillis = new Date(endTime).getTime();\r\n    return Math.max(0, endTimeMillis - currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ... ostatak vašeg postojećeg useEffect-a ...\r\n\r\n    // Pokretanje intervala za ažuriranje preostalog vremena svake sekunde\r\n    const interval = setInterval(() => {\r\n      const updatedRemainingTimes = {};\r\n\r\n      porudzbine.forEach((porudzbina) => {\r\n        const remainingTime = calculateRemainingTime(porudzbina.vremeIsporuke);\r\n        updatedRemainingTimes[porudzbina.id] = remainingTime;\r\n      });\r\n\r\n      setPreostaloVreme(updatedRemainingTimes);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [porudzbine]);\r\n\r\n  // Funkcija za formatiranje preostalog vremena\r\n  const formatRemainingTime = (remainingTime) => {\r\n    const days = Math.floor(remainingTime / (24 * 60 * 60 * 1000));\r\n    const hours = Math.floor(\r\n      (remainingTime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)\r\n    );\r\n    const minutes = Math.floor(\r\n      (remainingTime % (60 * 60 * 1000)) / (60 * 1000)\r\n    );\r\n    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Prikaz svih porudzbina</h1>\r\n      {loading ? (\r\n        <p>Učitavanje...</p>\r\n      ) : porudzbine.length === 0 ? (\r\n        <p>Trenutno nema porudzbina</p>\r\n      ) : (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ color: \"#279980\" }}>Kupac</th>\r\n              <th style={{ color: \"#279980\" }}>Adresa dostave</th>\r\n              <th style={{ color: \"#279980\" }}>Komentar</th>\r\n              <th style={{ color: \"#279980\" }}>Status</th>\r\n              <th style={{ color: \"#279980\" }}>Vreme do isporuke</th>\r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {porudzbine.map((porudzbina) => (\r\n              <tr key={porudzbina.id}>\r\n                <td>{getUsernameKorisnika(porudzbina.korisnikId)}</td>\r\n                {/*ovde*/}\r\n                <td>{porudzbina.adresaDostave}</td>\r\n                <td>{porudzbina.komentar}</td>\r\n                <td>{formatDateGetStatus(porudzbina.vremeIsporuke, porudzbina.otkazana)}</td>\r\n                <td>\r\n                  {porudzbina.otkazana\r\n                    ? \"/\"\r\n                    : preostaloVreme[porudzbina.id] > 0\r\n                    ? formatRemainingTime(preostaloVreme[porudzbina.id])\r\n                    : \"Isporuceno\"}\r\n                </td>\r\n                \r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SvePorudzbine;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\helpers\\ProtectedRoute.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DetaljiArtikla.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Korpa.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\ArtikalService.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\KorisnikService.js",["173"],[],"import jwtDecode from \"jwt-decode\";\r\nimport React,{useState} from \"react\";\r\n\r\n\r\nfunction ImageUploader({ onImageUpload}){\r\n    const [selectedImage, setSelectedImage]=useState(null);\r\n\r\n    const handleImageChange=(e)=>{\r\n        const file=e.target.files[0];\r\n        if(file){\r\n            const reader=new FileReader();\r\n            reader.onload=(event)=>{\r\n                setSelectedImage(event.target.result);\r\n                onImageUpload(event.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"image/*\" onChange={handleImageChange}/>\r\n            {selectedImage && <img src={selectedImage} alt=\"Uploaded\"/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUploader;","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Mapa.js",["174","175","176","177"],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\MapaService.js",["178"],[],"import { Icon } from \"leaflet\";\r\n\r\nconst customIcon=new Icon({\r\n    iconUrl: require(\"../images/marker-icon.png\"),\r\n    iconSize: [38,38]\r\n  });","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PaypalCheckoutButton.js",["179","180","181","182"],[],{"ruleId":"183","severity":1,"message":"184","line":16,"column":7,"nodeType":"185","messageId":"186","endLine":16,"endColumn":16},{"ruleId":"183","severity":1,"message":"187","line":5,"column":10,"nodeType":"185","messageId":"186","endLine":5,"endColumn":16},{"ruleId":"183","severity":1,"message":"188","line":5,"column":18,"nodeType":"185","messageId":"186","endLine":5,"endColumn":35},{"ruleId":"183","severity":1,"message":"189","line":11,"column":10,"nodeType":"185","messageId":"186","endLine":11,"endColumn":29},{"ruleId":"183","severity":1,"message":"190","line":13,"column":10,"nodeType":"185","messageId":"186","endLine":13,"endColumn":17},{"ruleId":"183","severity":1,"message":"191","line":13,"column":19,"nodeType":"185","messageId":"186","endLine":13,"endColumn":29},{"ruleId":"183","severity":1,"message":"192","line":14,"column":10,"nodeType":"185","messageId":"186","endLine":14,"endColumn":22},{"ruleId":"183","severity":1,"message":"193","line":14,"column":24,"nodeType":"185","messageId":"186","endLine":14,"endColumn":39},{"ruleId":"183","severity":1,"message":"194","line":18,"column":10,"nodeType":"185","messageId":"186","endLine":18,"endColumn":23},{"ruleId":"183","severity":1,"message":"195","line":18,"column":25,"nodeType":"185","messageId":"186","endLine":18,"endColumn":35},{"ruleId":"183","severity":1,"message":"196","line":19,"column":10,"nodeType":"185","messageId":"186","endLine":19,"endColumn":23},{"ruleId":"183","severity":1,"message":"197","line":22,"column":10,"nodeType":"185","messageId":"186","endLine":22,"endColumn":19},{"ruleId":"183","severity":1,"message":"198","line":24,"column":10,"nodeType":"185","messageId":"186","endLine":24,"endColumn":14},{"ruleId":"183","severity":1,"message":"199","line":108,"column":9,"nodeType":"185","messageId":"186","endLine":108,"endColumn":26},{"ruleId":"183","severity":1,"message":"200","line":133,"column":11,"nodeType":"185","messageId":"186","endLine":133,"endColumn":19},{"ruleId":"183","severity":1,"message":"201","line":3,"column":10,"nodeType":"185","messageId":"186","endLine":3,"endColumn":14},{"ruleId":"183","severity":1,"message":"196","line":13,"column":10,"nodeType":"185","messageId":"186","endLine":13,"endColumn":23},{"ruleId":"183","severity":1,"message":"199","line":118,"column":9,"nodeType":"185","messageId":"186","endLine":118,"endColumn":26},{"ruleId":"183","severity":1,"message":"202","line":8,"column":25,"nodeType":"185","messageId":"186","endLine":8,"endColumn":41},{"ruleId":"183","severity":1,"message":"198","line":9,"column":10,"nodeType":"185","messageId":"186","endLine":9,"endColumn":14},{"ruleId":"203","severity":1,"message":"204","line":80,"column":6,"nodeType":"205","endLine":80,"endColumn":8,"suggestions":"206"},{"ruleId":"183","severity":1,"message":"207","line":12,"column":10,"nodeType":"185","messageId":"186","endLine":12,"endColumn":18},{"ruleId":"183","severity":1,"message":"208","line":12,"column":20,"nodeType":"185","messageId":"186","endLine":12,"endColumn":31},{"ruleId":"183","severity":1,"message":"209","line":30,"column":9,"nodeType":"185","messageId":"186","endLine":30,"endColumn":19},{"ruleId":"183","severity":1,"message":"209","line":8,"column":9,"nodeType":"185","messageId":"186","endLine":8,"endColumn":19},{"ruleId":"183","severity":1,"message":"210","line":9,"column":10,"nodeType":"185","messageId":"186","endLine":9,"endColumn":15},{"ruleId":"183","severity":1,"message":"211","line":17,"column":10,"nodeType":"185","messageId":"186","endLine":17,"endColumn":28},{"ruleId":"183","severity":1,"message":"212","line":18,"column":10,"nodeType":"185","messageId":"186","endLine":18,"endColumn":18},{"ruleId":"183","severity":1,"message":"213","line":18,"column":20,"nodeType":"185","messageId":"186","endLine":18,"endColumn":31},{"ruleId":"183","severity":1,"message":"214","line":19,"column":10,"nodeType":"185","messageId":"186","endLine":19,"endColumn":16},{"ruleId":"183","severity":1,"message":"215","line":20,"column":10,"nodeType":"185","messageId":"186","endLine":20,"endColumn":16},{"ruleId":"183","severity":1,"message":"216","line":27,"column":17,"nodeType":"185","messageId":"186","endLine":27,"endColumn":25},{"ruleId":"183","severity":1,"message":"217","line":29,"column":9,"nodeType":"185","messageId":"186","endLine":29,"endColumn":24},{"ruleId":"183","severity":1,"message":"218","line":172,"column":9,"nodeType":"185","messageId":"186","endLine":172,"endColumn":26},{"ruleId":"183","severity":1,"message":"219","line":182,"column":11,"nodeType":"185","messageId":"186","endLine":182,"endColumn":23},{"ruleId":"203","severity":1,"message":"220","line":234,"column":6,"nodeType":"205","endLine":234,"endColumn":17,"suggestions":"221"},{"ruleId":"183","severity":1,"message":"222","line":288,"column":9,"nodeType":"185","messageId":"186","endLine":288,"endColumn":21},{"ruleId":"183","severity":1,"message":"223","line":17,"column":11,"nodeType":"185","messageId":"186","endLine":17,"endColumn":18},{"ruleId":"203","severity":1,"message":"224","line":81,"column":6,"nodeType":"205","endLine":81,"endColumn":8,"suggestions":"225"},{"ruleId":"183","severity":1,"message":"226","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":17},{"ruleId":"183","severity":1,"message":"227","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":12},{"ruleId":"183","severity":1,"message":"228","line":12,"column":10,"nodeType":"185","messageId":"186","endLine":12,"endColumn":20},{"ruleId":"183","severity":1,"message":"229","line":15,"column":10,"nodeType":"185","messageId":"186","endLine":15,"endColumn":20},{"ruleId":"183","severity":1,"message":"219","line":90,"column":11,"nodeType":"185","messageId":"186","endLine":90,"endColumn":23},{"ruleId":"183","severity":1,"message":"230","line":3,"column":7,"nodeType":"185","messageId":"186","endLine":3,"endColumn":17},{"ruleId":"183","severity":1,"message":"231","line":4,"column":10,"nodeType":"185","messageId":"186","endLine":4,"endColumn":13},{"ruleId":"183","severity":1,"message":"232","line":7,"column":9,"nodeType":"185","messageId":"186","endLine":7,"endColumn":17},{"ruleId":"183","severity":1,"message":"233","line":11,"column":9,"nodeType":"185","messageId":"186","endLine":11,"endColumn":20},{"ruleId":"183","severity":1,"message":"234","line":11,"column":22,"nodeType":"185","messageId":"186","endLine":11,"endColumn":27},"no-unused-vars","'linkStyle' is assigned a value but never used.","Identifier","unusedVar","'isPast' is defined but never used.","'differenceInYears' is defined but never used.","'notificationVisible' is assigned a value but never used.","'isValid' is assigned a value but never used.","'setIsValid' is assigned a value but never used.","'isTypingDate' is assigned a value but never used.","'setIsTypingDate' is assigned a value but never used.","'selectPicture' is assigned a value but never used.","'setPicture' is assigned a value but never used.","'UploadedImage' is assigned a value but never used.","'postarina' is assigned a value but never used.","'user' is assigned a value but never used.","'handleImageChange' is assigned a value but never used.","'prodavac' is assigned a value but never used.","'json' is defined but never used.","'setIsLoginFailed' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'decodedToken' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["235"],"'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'formatDate' is assigned a value but never used.","'email' is assigned a value but never used.","'selectedArtikliIds' is assigned a value but never used.","'kolicina' is assigned a value but never used.","'setKolicina' is assigned a value but never used.","'isPaid' is assigned a value but never used.","'payPal' is assigned a value but never used.","'setKorpa' is assigned a value but never used.","'odabraniArtikli' is assigned a value but never used.","'handlePayPalClick' is assigned a value but never used.","'decodedToken' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ukupnaPostarina'. Either include it or remove the dependency array.",["236"],"'handlePoruci' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["237"],"'jwtDecode' is defined but never used.","'mapa' is defined but never used.","'porudzbine' is assigned a value but never used.","'isporuceno' is assigned a value but never used.","'customIcon' is assigned a value but never used.","'act' is defined but never used.","'navigate' is assigned a value but never used.","'description' is assigned a value but never used.","'price' is assigned a value but never used.",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [decodedToken, token]",{"range":"244","text":"245"},"Update the dependencies array to be: [cartItems, ukupnaPostarina]",{"range":"246","text":"247"},"Update the dependencies array to be: [token]",{"range":"248","text":"249"},[2468,2470],"[decodedToken, token]",[8356,8367],"[cartItems, ukupnaPostarina]",[2530,2532],"[token]"]