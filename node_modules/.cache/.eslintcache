[{"C:\\Users\\irenv\\Desktop\\dummy\\src\\index.js":"1","C:\\Users\\irenv\\Desktop\\dummy\\src\\reportWebVitals.js":"2","C:\\Users\\irenv\\Desktop\\dummy\\src\\App.js":"3","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PocetnaStranica.js":"4","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\SviProizvodi.js":"5","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Logovanje.js":"6","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Registracija.js":"7","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\UlogovanKorisnik.js":"8","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Profil.js":"9","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PregledArtikala.js":"10","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\DetaljiArtikla.js":"11","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PrethodnePorudzbine.js":"12","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Korpa.js":"13","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\DodavanjeArtikla.js":"14","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\NovePorudzbine.js":"15","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\StarePorudzbine.js":"16","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Verifikacija.js":"17","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PrikazVerifikacija.js":"18","C:\\Users\\irenv\\Desktop\\dummy\\src\\services\\ArtikalService.js":"19","C:\\Users\\irenv\\Desktop\\dummy\\src\\services\\KorisnikService.js":"20","C:\\Users\\irenv\\Desktop\\dummy\\src\\helpers\\ProtectedRoute.js":"21"},{"size":536,"mtime":1690317114727,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1690271762512,"results":"24","hashOfConfig":"23"},{"size":3317,"mtime":1691786324621,"results":"25","hashOfConfig":"23"},{"size":382,"mtime":1691402641767,"results":"26","hashOfConfig":"23"},{"size":133,"mtime":1690400240918,"results":"27","hashOfConfig":"23"},{"size":2334,"mtime":1691781056316,"results":"28","hashOfConfig":"23"},{"size":7044,"mtime":1691509971931,"results":"29","hashOfConfig":"23"},{"size":1797,"mtime":1691787320554,"results":"30","hashOfConfig":"23"},{"size":8248,"mtime":1691581146435,"results":"31","hashOfConfig":"23"},{"size":10844,"mtime":1691352211066,"results":"32","hashOfConfig":"23"},{"size":739,"mtime":1690640098876,"results":"33","hashOfConfig":"23"},{"size":4873,"mtime":1690836629902,"results":"34","hashOfConfig":"23"},{"size":731,"mtime":1690973074833,"results":"35","hashOfConfig":"23"},{"size":9879,"mtime":1691521990246,"results":"36","hashOfConfig":"23"},{"size":1825,"mtime":1691244836261,"results":"37","hashOfConfig":"23"},{"size":1836,"mtime":1691244734883,"results":"38","hashOfConfig":"23"},{"size":6457,"mtime":1691781277239,"results":"39","hashOfConfig":"23"},{"size":3360,"mtime":1691784400710,"results":"40","hashOfConfig":"23"},{"size":751,"mtime":1691503957532,"results":"41","hashOfConfig":"23"},{"size":790,"mtime":1691784578589,"results":"42","hashOfConfig":"23"},{"size":965,"mtime":1691785190460,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"pvegpc",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"47"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\irenv\\Desktop\\dummy\\src\\index.js",[],[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\reportWebVitals.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\App.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PocetnaStranica.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\SviProizvodi.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Logovanje.js",["114"],[],"import React, {useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Logovanje =()=>{\r\n    const navigate=useNavigate();\r\n\r\n    const [isLoginFailed, setIsLoginFailed]=useState(false);\r\n    \r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        \"Username\" : \"\",\r\n        \"Lozinka\" : \"\"\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value}=e.target;\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('Form data submitted:', formData);\r\n        fetch('https://localhost:44388/Korisnik/logovanje', {\r\n            method: 'POST',\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n            },\r\n            mode:'cors',\r\n        })\r\n        .then((response)=>response.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n            console.log('Response from server:', data);\r\n            var jwtToken=data['token'];\r\n            localStorage.setItem(\"token\", jwtToken);\r\n            navigate('/ulogovan-korisnik');\r\n        })\r\n        .catch((error)=> {\r\n              console.error(\"Error occurred:\",error);   \r\n        })\r\n    };\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>Logovanje</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"text\">Username:</label>\r\n                <input\r\n                    type=\"username\"\r\n                    id=\"username\"\r\n                    name=\"Username\"\r\n                    value={formData.Username}\r\n                    onChange={handleChange}\r\n                    required\r\n                /><br/>\r\n\r\n                <label htmlFor=\"lozinka\">Lozinka:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"lozinka1\"\r\n                    name=\"Lozinka\"\r\n                    value={formData.Lozinka}\r\n                    onChange={handleChange}\r\n                    required\r\n                /><br/>\r\n\r\n                <button type=\"submit\">Uloguj se</button>\r\n            </form>\r\n            {isLoginFailed && <p>Neuspesno logovanje. Proverite vase podatke i pokusajte ponovo.</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logovanje;","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Registracija.js",["115","116","117"],[],"import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ImageUploader from \"../services/ArtikalService\";\r\n\r\nconst Registracija = () => {\r\n  const navigate = useNavigate();\r\n  const [showNotification, setShowNotification] = useState(false);\r\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\r\n  const [notificationVisible, setNotificationVisible] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  //slika\r\n  const [UploadedImage, setUploadedImage] = useState(null);\r\n  const [slikaKorisnika,setSlikaKorisnika]=useState(\"\");\r\n  const handleImageUpload = (imageData) => {\r\n    setUploadedImage(imageData);\r\n    setSlikaKorisnika(imageData);\r\n  };\r\n\r\n  const [formData, setFormData] = useState({\r\n    KorisnickoIme: \"\",\r\n    Email: \"\",\r\n    Lozinka: \"\",\r\n    Ime: \"\",\r\n    Prezime: \"\",\r\n    DatumRodjenja: \"2000-01-01\",\r\n    Adresa: \"\",\r\n    TipKorisnika: 0,\r\n    SlikaKorisnika: \"\",\r\n    Verifikovan: false,\r\n    Postarina: 0,\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value); // Ažuriramo email stanje\r\n    }\r\n\r\n    const newValue = name === \"datumRodjenja\" ? new Date(value) : value;\r\n    const newTipKorisnika =\r\n      name === \"tipKorisnika\" && value === \"Prodavac\"\r\n        ? 1\r\n        : formData.tipKorisnika;\r\n\r\n    setFormData({\r\n      ...formData,\r\n      [name]: newValue,\r\n      tipKorisnika: newTipKorisnika,\r\n    });\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      slika: e.target.files[0],\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, uskoro cete primiti jos jedan mejl da Vas obavestimo o verifikaciji vaseg naloga.\",\r\n    };\r\n\r\n    // Ovde možete implementirati logiku za slanje podataka na server ili ih spremanje u lokalno skladište.\r\n    fetch(\"https://localhost:44388/Korisnik\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        ...formData,\r\n        slikaKorisnika: slikaKorisnika,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((Response) => Response.json())\r\n      .then((data) => {\r\n        //obrada odgovora servera\r\n\r\n        console.log(formData.tipKorisnika);\r\n        if (formData.tipKorisnika === 1) {\r\n          setNotificationMessage(\r\n            \"Registracija je uspešno zabeležena. Sačekajte da se obradi. O uspesnoj registraciji bicete obavesteni putem e-mail adrese...\"\r\n          );\r\n          setShowNotification(true);\r\n\r\n          console.log(emailData);\r\n          //slanje mejla\r\n          fetch(\"https://localhost:44388/Email/emailService\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(emailData),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            mode: \"cors\",\r\n          })\r\n            .then((Response) => Response.json())\r\n            .then((data) => {\r\n              console.log(\"POGODILI BEK.\");\r\n            })\r\n            .catch((error) => {\r\n              //obrada greske\r\n              console.log(\"PUKLI\");\r\n              console.log(error);\r\n            });\r\n\r\n          // Postavljanje tajmera za skrivanje notifikacije i navigaciju nakon 5 sekundi\r\n          setNotificationVisible(true);\r\n          setTimeout(() => {\r\n            setNotificationVisible(false);\r\n            navigate(\"/logovanje\");\r\n          }, 5000); // 5000 milisekundi = 5 sekundi\r\n        } else {\r\n          navigate(\"/logovanje\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //obrada greske\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Registracija</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"korisnickoIme\">Korisničko ime:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"korisnickoIme\"\r\n          name=\"korisnickoIme\"\r\n          value={formData.korisnickoIme}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"email\">E-mail adresa:</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"lozinka\">Lozinka:</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"lozinka\"\r\n          name=\"lozinka\"\r\n          value={formData.lozinka}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"ime\">Ime:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"ime\"\r\n          name=\"ime\"\r\n          value={formData.ime}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"prezime\">Prezime:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"prezime\"\r\n          name=\"prezime\"\r\n          value={formData.prezime}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"datumRodjenja\">Datum rođenja:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"datumRodjenja\"\r\n          name=\"datumRodjenja\"\r\n          value={\r\n            formData.datumRodjenja\r\n              ? formData.datumRodjenja.toISOString().split(\"T\")[0]\r\n              : \"\"\r\n          }\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"adresa\">Adresa:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"adresa\"\r\n          name=\"adresa\"\r\n          value={formData.adresa}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"tipKorisnika\">Tip korisnika:</label>\r\n        <select\r\n          id=\"tipKorisnika\"\r\n          name=\"tipKorisnika\"\r\n          value={formData.tipKorisnika}\r\n          onChange={handleChange}\r\n          required\r\n        >\r\n          <option value=\"Kupac\">Kupac</option>\r\n          <option value=\"Prodavac\">Prodavac</option>\r\n        </select>\r\n        <br />\r\n\r\n        {formData.tipKorisnika === \"Prodavac\" && (\r\n          <div>\r\n            <label htmlFor=\"postarina\">Postarina:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"postarina\"\r\n              name=\"postarina\"\r\n              value={formData.postarina}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <br />\r\n          </div>\r\n        )}\r\n\r\n        <label htmlFor=\"slika\">Slika profila:</label>\r\n        <ImageUploader onImageUpload={handleImageUpload} />\r\n        <br />\r\n\r\n        <button type=\"submit\">Registruj se</button>\r\n      </form>\r\n\r\n      {showNotification && (\r\n        <div className=\"notification\">{notificationMessage}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Registracija;\r\n","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\UlogovanKorisnik.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Profil.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PregledArtikala.js",["118","119","120","121"],[],"import React,{useEffect, useState} from \"react\";\r\nimport DetaljiArtikla from \"./DetaljiArtikla\";\r\nimport chartSlika from \"../images/chart.png\";\r\nimport Korpa from \"./Korpa\";\r\n\r\n\r\nconst PregledArtikala=()=>{\r\n\r\n    const [artikli, setArtikli]=useState([]);\r\n    const[selectedArtikal, setSelectedArtikal]=useState(null);\r\n    \r\n\r\n    const [adresa, setAdresa] = useState(\"\");\r\n    const [komentar, setKomentar] = useState(\"\");\r\n    const [cartItems, setCartItems] = useState([]);\r\n    // Globalna promenljiva za ID-jeve artikala\r\n    const [selectedArtikliIds, setSelectedArtikliIds] = useState([]);\r\n\r\n    const formatiranoTrenutnoVreme=()=>{\r\n      const currentDate=new Date();\r\n      const formattedDate=currentDate.toLocaleDateString(\"en-GB\", {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n      });\r\n      \r\n      const formattedTime=currentDate.toLocaleTimeString(\"en-US\", {\r\n        hour12: false, \r\n        hour:\"2-digit\",\r\n        minute: \"2-digit\",\r\n        second: \"2-digit\",\r\n      })\r\n      \r\n      const stringovi =formattedDate.split(\"/\");\r\n      const datum =stringovi[2]+\"-\"+stringovi[1]+\"-\"+stringovi[0] +\"T\"+formattedTime+\".196Z\";\r\n      return datum;\r\n    }\r\n\r\n    \r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [sortOption, setSortOption] = useState(\"naziv\");\r\n    const [sortOrder, setSortOrder] = useState(\"asc\");\r\n    const [korpa, setKorpa] = useState(0);\r\n    const [ukupanIznos, setUkupanIznos] = useState(0);\r\n    const [showPregledPorudzbine, setShowPregledPorudzbine] = useState(false);\r\n    const odabraniArtikli = cartItems.filter((item) => item.kolicina > 0);\r\n    \r\n\r\n    \r\n    \r\n    const posaljiPorudzbinuNaServer = () => {\r\n      // Prvo kreiramo objekat koji sadrži sve potrebne informacije za porudžbinu\r\n      \r\n      const newSelectedArtikliIds = cartItems.map((item) => item.artikal.id);\r\n      setSelectedArtikliIds(newSelectedArtikliIds);\r\n      \r\n      console.log(newSelectedArtikliIds);\r\n      console.log(artikli);\r\n\r\n      const zaSlanje =artikli.filter((artikal)=>newSelectedArtikliIds.includes(artikal.id));\r\n\r\n      console.log(zaSlanje);\r\n      \r\n      const porudzbina = {\r\n        artikli: zaSlanje,\r\n        ukupanIznos: ukupanIznos,\r\n        adresaDostave: adresa,\r\n        komentar: komentar,\r\n        korisnikId: 4, //zakucali miru\r\n        vremeIsporuke: formatiranoTrenutnoVreme(),\r\n        \r\n      };\r\n      // Zatim koristimo fetch funkciju za slanje POST zahteva na server\r\n      fetch(\"https://localhost:44388/Porudzbina\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // \"Authorization\": \"Bearer \" + localStorage.getItem(\"token\")   DODAVANJE AUTHORIZATION HEADER-a\r\n        },\r\n        body: JSON.stringify(porudzbina),\r\n        mode: \"cors\",\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // uspesno poslato serveru\r\n          console.log(\"Sta saljem:\");\r\n          console.log(data);\r\n          alert(\"Porudžbina je uspešno poslata!\");\r\n          setCartItems([]); // Resetujemo korpu nakon što je porudžbina poslata\r\n          setUkupanIznos(0); // Resetujemo ukupan iznos nakon što je porudžbina poslata\r\n          setAdresa(\"\"); // Resetujemo polje za adresu nakon što je porudžbina poslata\r\n          setKomentar(\"\"); // Resetujemo polje za komentar nakon što je porudžbina poslata\r\n        })\r\n        .catch((error) => {\r\n         //greska prilikom slanja na server\r\n          console.error(\"Greška prilikom slanja porudžbine:\", error);\r\n          alert(\"Došlo je do greške prilikom slanja porudžbine.\");\r\n        });\r\n    };\r\n    \r\n    useEffect(()=>{\r\n      fetch('https://localhost:44388/Artikal', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n            mode: 'cors',\r\n          })\r\n          .then((responce)=>responce.json())\r\n        .then((data)=> {\r\n            //obrada odgovora servera\r\n            console.log(data);\r\n            setArtikli(data);\r\n            \r\n        })\r\n        .catch((error)=>{\r\n            //obrada greske\r\n            console.error(\"Greška prilikom dobavljanja podataka sa servera:\", error);\r\n        });\r\n    }, []); //prazan dependency niz što znači da će se izvršiti samo prilikom prvog renderovanja komponente.\r\n\r\n    useEffect(()=>{\r\n      if(cartItems.length ===0){\r\n        setShowPregledPorudzbine(false);\r\n      }\r\n    },[cartItems]);\r\n\r\n    const filteredArtikli = artikli.filter((artikal) => {\r\n        return artikal.naziv.toLowerCase().includes(searchTerm.toLowerCase());\r\n    });\r\n\r\n    const dodajUKorpu = (artikal) => {\r\n      const existingItem = cartItems.find((item) => item.artikal.id === artikal.id);\r\n      console.log(\"*******\"+artikal.id+\"**************\");\r\n      if (existingItem) {\r\n        if (existingItem.kolicina >= artikal.kolicina) {\r\n          alert(\"Dostignuta je maksimalna količina za ovaj artikal.\");\r\n          return;\r\n        }\r\n    \r\n        setCartItems(\r\n          cartItems.map((item) =>\r\n            item.artikal.id === artikal.id\r\n              ? { ...item, kolicina: item.kolicina + 1 }\r\n              : item\r\n          )\r\n        );\r\n      } else {\r\n        setCartItems([...cartItems, { artikal, kolicina: 1, cena:0 }]);\r\n      }\r\n      setUkupanIznos(ukupanIznos + artikal.cena);\r\n    };\r\n\r\n    const obrisiIzKorpe = (artikal) => {\r\n      const existingItem = cartItems.find((item) => item.artikal.id === artikal.id);\r\n      if (existingItem) {\r\n        if (existingItem.kolicina === 1) {\r\n          setCartItems(cartItems.filter((item) => item.artikal.id !== artikal.id));\r\n        } else {\r\n          setCartItems(\r\n            cartItems.map((item) =>\r\n              item.artikal.id === artikal.id\r\n                ? { ...item, kolicina: item.kolicina - 1 }\r\n                : item\r\n            )\r\n          );\r\n        }\r\n        setUkupanIznos(ukupanIznos - artikal.cena);\r\n      }\r\n    };\r\n\r\n    const handlePoruci = () => {\r\n      // Ovde možete implementirati logiku za slanje porudžbine na server, resetovanje korpe, ili nešto drugo što želite\r\n      alert(\"Porudžbina je uspešno poslata!\");\r\n      setCartItems([]);\r\n      setUkupanIznos(0);\r\n    };\r\n\r\n    const sortedArtikli = [...filteredArtikli]; // Kreiramo kopiju niza kako bismo sačuvali originalni niz nepromenjen\r\n\r\n    if (sortOption === \"naziv\") {\r\n      // Sortiranje po nazivu (abecedno)\r\n      sortedArtikli.sort((a, b) => a.naziv.localeCompare(b.naziv));\r\n    } else if (sortOption === \"cena\") {\r\n      // Sortiranje po ceni\r\n      sortedArtikli.sort((a, b) => {\r\n        if (sortOrder === \"asc\") {\r\n          return a.cena - b.cena; // Sortiranje od najjeftinijeg do najskupljeg\r\n        } else {\r\n          return b.cena - a.cena; // Sortiranje od najskupljeg do najjeftinijeg\r\n        }\r\n      });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div style={{ position: \"absolute\", top: \"20px\", right: \"20px\" }}>\r\n              <img src={chartSlika} alt=\"Korpa\" style={{ width: \"40px\", height: \"40px\" }} />\r\n              <span>{korpa}</span>\r\n            </div>\r\n\r\n            <h1 style={{color: \"#279980\"}}>Dostupni artikli</h1>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Unesite naziv artikla za pretragu\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n            <select\r\n                value={sortOption}\r\n                onChange={(e) => setSortOption(e.target.value)}\r\n            >\r\n                <option value=\"naziv\">Sortiraj po nazivu</option>\r\n                <option value=\"cena\">Sortiraj po ceni</option>\r\n            </select>\r\n            <button onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}>\r\n                {sortOrder === \"asc\" ? \"Sortiraj po ceni (rastuce)\" : \"Sortiraj po ceni (opadajuce)\"}\r\n            </button>\r\n            <table>\r\n        <thead>\r\n          <tr>\r\n            <th style={{color: \"#279980\"}}>Naziv</th>\r\n            <th style={{color: \"#279980\"}}>Slika</th>\r\n            <th style={{color: \"#279980\"}}>Količina</th>\r\n            <th style={{color: \"#279980\"}}>Cena</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {sortedArtikli.map((artikal) => (\r\n\r\n            <tr key={artikal.id}>\r\n              <td>{artikal.naziv}</td>\r\n              <td>\r\n                <img src={artikal.slika} alt={artikal.naziv} style={{ width: \"100px\" }} />\r\n              </td>\r\n              <td style={{ color: artikal.kolicina > 0 ? 'green' : 'red' }}>\r\n                {artikal.kolicina > 0 ? 'Na stanju' : 'Nema na stanju'}\r\n              </td>\r\n              <td>{artikal.cena.toLocaleString(\"sr-RS\", { style: \"currency\", currency: \"RSD\" })}</td>\r\n              <td>\r\n              <button type=\"button\" onClick={() => {\r\n                setSelectedArtikal(artikal);\r\n              }}>\r\n                Detalji\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" onClick={()=> dodajUKorpu(artikal)}>Dodaj u korpu</button>\r\n              </td>\r\n            </tr>\r\n            \r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {selectedArtikal && <DetaljiArtikla artikal={selectedArtikal} />}\r\n      <Korpa cartItems={cartItems} obrisiIzKorpe={obrisiIzKorpe} />\r\n      \r\n      <div>\r\n        {/* ...ostatak JSX koda... */}\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <h2 style={{ color: \"#279980\" }}>Ukupan iznos:</h2>{\" \"}\r\n          <h2>{ukupanIznos.toLocaleString(\"sr-RS\", { style: \"currency\", currency: \"RSD\" })}</h2>\r\n          {cartItems.length>0 &&(\r\n            <button onClick={()=> setShowPregledPorudzbine(true)}>Pregled porudzbine</button>\r\n          )}\r\n        </div>\r\n        {showPregledPorudzbine && cartItems.length > 0 && (\r\n          <div>\r\n            <h2>Artikli u korpi:</h2>\r\n          <ul>\r\n            {cartItems.map((item, index) => (\r\n              <li key={index}>\r\n                {item.artikal.naziv} (Količina: {item.kolicina})\r\n              </li>\r\n            ))}\r\n          </ul>\r\n            <br/>\r\n          <div>\r\n            <label htmlFor=\"adresa\">Adresa:</label>\r\n            <input\r\n              id=\"adresa\"\r\n              value={adresa}\r\n              onChange={(e) => setAdresa(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"komentar\">Komentar:</label>\r\n            <textarea\r\n              id=\"komentar\"\r\n              value={komentar}\r\n              onChange={(e) => setKomentar(e.target.value)}\r\n            />\r\n          </div>\r\n          <button onClick={posaljiPorudzbinuNaServer}>Poruči</button>\r\n        </div>\r\n        )}\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default PregledArtikala;","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\DetaljiArtikla.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PrethodnePorudzbine.js",["122","123"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst PrethodnePorudzbine=()=>{\r\n\r\n    const [porudzbine, setPorudzbine]=useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [sortOption, setSortOption] = useState(\"naziv\");\r\n    const [sortOrder, setSortOrder] = useState(\"asc\");\r\n\r\n    const[formData, setFormData]=useState({\r\n        \r\n        \"korisnikId\": 0,\r\n        \"adresaDostave\": \"string\",\r\n        \"komentar\": \"string\",\r\n        \"artikli\":[\r\n            {\r\n                \"prodavacId\":0,\r\n                \"naziv\": \"string\",\r\n                \"cena\": 0,\r\n                \"kolicina\": 0,\r\n                \"opis\":\"string\",\r\n                \"slika\": \"string\"\r\n            }\r\n        ],\r\n        \"vremeIsporuke\":\"2000-18-06T18:48:23.437Z\"\r\n        \r\n      \r\n    });\r\n\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const day = date.getDate().toString().padStart(2, '0');\r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n        const year = date.getFullYear();\r\n        return `${day}-${month}-${year}`;\r\n      };\r\n    \r\n    useEffect(()=> {\r\n        fetch('https://localhost:44388/Porudzbina/allPorudzbineKorisnika?idKorisnika=4', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode:'cors',\r\n        })\r\n        .then((responce)=>responce.json())\r\n        .then((data)=>{\r\n            //obrada odgovora servera \r\n            setPorudzbine(data);\r\n            console.log(data);\r\n            console.log(data[0]['vremeIsporuke']);\r\n        })\r\n        .catch((error)=>{\r\n            console.error(\"Greška prilikom dobavljanja podataka sa servera:\", error);\r\n        });\r\n    }, []);\r\n\r\n    const filteredPorudzbine=porudzbine.filter((porudzbine) => {\r\n        \r\n        return porudzbine.artikli.some((artikal) => artikal.naziv.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    });\r\n\r\n    const sortedPorudzbine=[...filteredPorudzbine];\r\n\r\n    if (sortOption === \"naziv\") {\r\n        sortedPorudzbine.sort((a, b) => a.artikli[0].naziv.localeCompare(b.artikli[0].naziv));\r\n    } else if (sortOption === \"datum\") {\r\n        sortedPorudzbine.sort((a, b) => {\r\n            console.log(JSON.stringify(sortedPorudzbine));\r\n            if (sortOrder === \"asc\") {\r\n                return new Date(a.vremeIsporuke) - new Date(b.vremeIsporuke);\r\n            } else {\r\n                return new Date(b.vremeIsporuke) - new Date(a.vremeIsporuke);\r\n            }\r\n        });\r\n    }\r\n    //u principu bih trebala da sortiram po datumu, to ima najvise smisla\r\n\r\n    return(\r\n        <div>\r\n            <h1>Prethodne porudzbine</h1>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Unesite naziv artikla za pretragu\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n            <select\r\n                value={sortOption}\r\n                onChange={(e) => setSortOption(e.target.value)}\r\n            >\r\n                <option value=\"naziv\">Sortiraj po nazivu</option>\r\n                <option value=\"datum\">Sortiraj po datumu</option>\r\n            </select>\r\n            <button onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}>\r\n                {sortOrder === \"asc\" ? \"Sortiraj po datumu (rastuce)\" : \"Sortiraj po datumu (opadajuce)\"}\r\n            </button>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Vreme isporuke</th>\r\n                        <th>Adresa dostave</th>\r\n                        <th>Artikli</th>\r\n                        <th>Komentar</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {sortedPorudzbine.map((porudzbina) => (\r\n                    <tr key={porudzbina.vremeIsporuke}>\r\n                        <td>{formatDate(porudzbina.vremeIsporuke)}</td>\r\n                        <td>{porudzbina.adresaDostave}</td>\r\n                        <td>\r\n                            {porudzbina.artikli.map((artikal) => (\r\n                                <div key={artikal.prodavacId}>\r\n                                    <p>Naziv: {artikal.naziv}</p>\r\n                                    <p>Cena: {artikal.cena}</p>\r\n                                    <p>Kolicina: {artikal.kolicina}</p>\r\n                                    <p>Opis: {artikal.opis}</p>\r\n                                    <p>Slika: {artikal.slika}</p>\r\n                                </div>\r\n                            ))}\r\n                        </td>\r\n                        <td>{porudzbina.komentar}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrethodnePorudzbine;","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Korpa.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\DodavanjeArtikla.js",["124","125","126"],[],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport ImageUploader from \"../services/ArtikalService\";\r\nimport { json } from \"react-router-dom\";\r\n\r\nconst DodavanjeArtikla = () => {\r\n  const formRef = useRef(null);\r\n  const [artikli, setArtikli] = useState([]);\r\n  const [trenutniArtikal, setTrenutniArtikal] = useState(null);\r\n  const [showUpdateForm, setShowUpdateForm] = useState(false);\r\n  const [slikaArtikla, setSlikaArtikla] = useState(\"\");\r\n  const [UploadedImage, setUploadedImage] = useState(null);\r\n\r\n  const azurirajArtikal = (artikal) => {\r\n    setTrenutniArtikal(artikal);\r\n    setShowUpdateForm(true);\r\n  };\r\n\r\n  const handleImageUpload = (imageData) => {\r\n    console.log(imageData + \"irenaaaaaaaaaaaaaaaaaaaa\")\r\n    setUploadedImage(imageData);\r\n    setSlikaArtikla(imageData);\r\n  };\r\n\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault();\r\n    // Logika za slanje ažuriranih podataka na server\r\n    const formDataToUpdate = {\r\n      id: trenutniArtikal.id, // Pretpostavka da artikal ima svoj ID\r\n      prodavacId: formRef.current.prodavacId.value,\r\n      naziv: formRef.current.naziv.value,\r\n      cena: formRef.current.cena.value,\r\n      kolicina: formRef.current.kolicina.value,\r\n      opis: formRef.current.opis.value,\r\n      slika: slikaArtikla\r\n    };\r\n\r\n    console.log(\"Stigli smo do ovde ale\");\r\n\r\n    fetch(`https://localhost:44388/Artikal?idArtikla=${formDataToUpdate.id}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(formDataToUpdate),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Podaci su uspešno ažurirani na serveru:\", data);\r\n        // Nakon uspešnog ažuriranja podataka, sakrijemo formu za ažuriranje\r\n        setShowUpdateForm(false);\r\n        // Ažuriramo listu artikala da prikaže ažurirane podatke\r\n        setArtikli((prevArtikli) =>\r\n          prevArtikli.map((a) =>\r\n            a.id === formDataToUpdate.id ? formDataToUpdate : a\r\n          )\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greška prilikom slanja ažuriranih podataka na server:\",\r\n          error\r\n        );\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (trenutniArtikal) {\r\n      setFormData({\r\n        prodavacId: trenutniArtikal.prodavacId,\r\n        naziv: trenutniArtikal.naziv,\r\n        cena: trenutniArtikal.cena,\r\n        kolicina: trenutniArtikal.kolicina,\r\n        opis: trenutniArtikal.opis,\r\n        slika: trenutniArtikal.slika,\r\n      });\r\n    }\r\n  }, [trenutniArtikal]);\r\n\r\n  const [formData, setFormData] = useState({\r\n    prodavacId: 4, //zakucala na prodavac2\r\n    naziv: \"string\",\r\n    cena: 0,\r\n    kolicina: 0,\r\n    opis: \"string\",\r\n    slika: \"string\",\r\n  });\r\n\r\n  const handleImageChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      slika: e.target.files[0],\r\n    });\r\n  };\r\n\r\n  const obrisiArtikal = (artikal) => {\r\n    console.log(\"stigli smo dovde ale\");\r\n    const potvrdiBrisanje = window.confirm(\r\n      \"Da li želite da obrišete ovaj artikal?\"\r\n    );\r\n    if (potvrdiBrisanje) {\r\n      fetch(`https://localhost:44388/Artikal?idArtikla=${artikal.id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        mode: \"cors\",\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n          }\r\n          // Uklonite artikal iz liste nakon što ga uspešno obrišete\r\n          setArtikli((prevArtikli) =>\r\n            prevArtikli.filter((a) => a.id !== artikal.id)\r\n          );\r\n          console.log(\"Artikal uspešno obrisan.\");\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Greška prilikom brisanja artikla:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://localhost:44388/Artikal\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      // getAllArtikle()\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setArtikli(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greška prilikom dohvatanja artikala:\", error);\r\n      });\r\n    // setArtikli(getAllArtikle());\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //dalje ide lgika za slanje\r\n    const formDataToSend = {\r\n      prodavacId: formRef.current.prodavacId.value,\r\n      naziv: formRef.current.naziv.value,\r\n      cena: formRef.current.cena.value,\r\n      kolicina: formRef.current.kolicina.value,\r\n      opis: formRef.current.opis.value,\r\n      slika: slikaArtikla,\r\n    };\r\n\r\n    fetch(\"https://localhost:44388/Artikal\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(formDataToSend),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Podaci su uspesno poslati na server:\", data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greska prilikom slanja na server:\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dodavanje artikla</h1>\r\n      {showUpdateForm ? (\r\n        <form onSubmit={handleUpdate} ref={formRef}>\r\n          <label hidden>\r\n            ProdavacId:\r\n            <input\r\n              type=\"number\"\r\n              name=\"prodavacId\"\r\n              value={formData.prodavacId}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Naziv:\r\n            <input\r\n              type=\"text\"\r\n              name=\"naziv\"\r\n              value={formData.naziv} // Dodali smo vrednost iz formData za polje \"naziv\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Cena:\r\n            <input\r\n              type=\"number\"\r\n              name=\"cena\"\r\n              value={formData.cena} // Dodali smo vrednost iz formData za polje \"cena\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Kolicina:\r\n            <input\r\n              type=\"number\"\r\n              name=\"kolicina\"\r\n              value={formData.kolicina} // Dodali smo vrednost iz formData za polje \"kolicina\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Opis:\r\n            <input\r\n              type=\"text\"\r\n              name=\"opis\"\r\n              value={formData.opis} // Dodali smo vrednost iz formData za polje \"opis\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          \r\n          <label htmlFor=\"slika\">Slika:</label>\r\n          <ImageUploader onImageUpload={handleImageUpload} />\r\n\r\n          <button type=\"submit\">Sačuvaj ažuriranje</button>\r\n        </form>\r\n      ) : (\r\n        <form onSubmit={handleSubmit} ref={formRef}>\r\n          <label hidden>\r\n            ProdavacId:\r\n            <input\r\n              type=\"number\"\r\n              name=\"prodavacId\"\r\n              value={formData.prodavacId}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Naziv:\r\n            <input type=\"text\" name=\"naziv\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Cena:\r\n            <input type=\"number\" name=\"cena\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Kolicina:\r\n            <input type=\"number\" name=\"kolicina\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Opis:\r\n            <input type=\"text\" name=\"opis\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label htmlFor=\"slika\">Slika:</label>\r\n          <ImageUploader onImageUpload={handleImageUpload} />\r\n          <button type=\"submit\">Dodaj artikal</button>\r\n        </form>\r\n      )}\r\n\r\n      <div>\r\n        <h1>Prikaz svih artikala</h1>\r\n        <table>\r\n          <tr>\r\n            <th style={{ color: \"#279980\" }}>Naziv</th>\r\n            <th style={{ color: \"#279980\" }}>Cena</th>\r\n            <th style={{ color: \"#279980\" }}>Kolicina</th>\r\n            <th style={{ color: \"#279980\" }}>Opis</th>\r\n            <th style={{ color: \"#279980\" }}>Slika</th>\r\n          </tr>\r\n          {artikli.map((artikal) => (\r\n            <tr key={artikal.id}>\r\n              <td>{artikal.naziv}</td>\r\n              <td>\r\n                {artikal.cena.toLocaleString(\"sr-RS\", {\r\n                  style: \"currency\",\r\n                  currency: \"RSD\",\r\n                })}\r\n              </td>\r\n              <td>{artikal.kolicina}</td>\r\n              <td>{artikal.opis}</td>\r\n              <td>\r\n                <img src={artikal.slikaArtikla} alt=\"Uploaded\" style={{maxWidth: '100px'}}/>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    azurirajArtikal(artikal);\r\n                  }}\r\n                >\r\n                  Azuriraj\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" onClick={() => obrisiArtikal(artikal)}>\r\n                  Obrisi\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DodavanjeArtikla;\r\n","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\NovePorudzbine.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\StarePorudzbine.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\Verifikacija.js",["127"],[],"import React, { useState, useEffect } from \"react\";\r\nimport PrikazVerifikacija from \"./PrikazVerifikacija\";\r\n\r\nconst Verifikacija = () => {\r\n  const [prodavac, setProdavce] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" };\r\n    return new Date(dateString)\r\n      .toLocaleDateString(\"en-US\", options)\r\n      .replace(/\\//g, \"-\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    //slanje tokena u zaglavlju svakog zahteva\r\n    var token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n\r\n    fetch(\"https://localhost:44388/Korisnik/neverProdavce\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`Network response was not ok.`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setProdavce(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greska prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleVerifikacija = (index, email) => {\r\n    // Implementirajte logiku za verifikaciju\r\n    console.log(`Verifikacija prodavca sa indeksom ${index}`);\r\n    setEmail(email);\r\n\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, vasa registracija je odobrena.\",\r\n    };\r\n\r\n    fetch(`https://localhost:44388/Korisnik/verProdavca?idKorisnika=${index}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(index),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //ovde odradi fetch za post za slanje mejla\r\n        fetch(\"https://localhost:44388/Email/emailService\", {\r\n          body: JSON.stringify(emailData),\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\",\r\n        })\r\n          .then((Response) => Response.json())\r\n          .then((data) => {\r\n            console.log(\"Poslali mejl da smo validirali nalog.\");\r\n          })\r\n          .catch((error) => {\r\n            //obrada greske\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleOdbijVerifikaciju = (index, email) => {\r\n    // Implementirajte logiku za odbijanje verifikacije\r\n    console.log(`Odbijanje verifikacije prodavca sa indeksom ${index}`);\r\n\r\n    setEmail(email);\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, vasa registracija je odbijena.\",\r\n    };\r\n\r\n    fetch(\r\n      `https://localhost:44388/Korisnik/neverProdavca?idKorisnika=${index}`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(index),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //fetch za odbijanje verifikacije\r\n        fetch(\"https://localhost:44388/Email/emailService\", {\r\n          body: JSON.stringify(emailData),\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\",\r\n        })\r\n          .then((Response) => Response.json())\r\n          .then((data) => {\r\n            console.log(\"Poslali mejl da odbijemo validaciju.\");\r\n          })\r\n          .catch((error) => {\r\n            //obrada greske\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ color: \"#279980\" }}>\r\n        Prodavci koji cekaju na verifikaciju naloga\r\n      </h1>\r\n\r\n      {loading ? (\r\n        <p>Učitavanje...</p>\r\n      ) : prodavac.length === 0 ? (\r\n        <p>Trenutno nema korisnika koji cekaju na verifikaciju.</p>\r\n      ) : (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Slika</th>\r\n              <th>Korisnicko Ime</th>\r\n              <th>Ime</th>\r\n              <th>Prezime</th>\r\n              <th>Email</th>\r\n              <th>Datum rodjenja</th>\r\n              <th>Adresa</th>\r\n              <th>Postarina</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {prodavac.map((prodavac) => (\r\n              <tr key={prodavac.id}>\r\n                <td>{prodavac.slikaKorisnika}</td>\r\n                <td>{prodavac.korisnickoIme}</td>\r\n                <td>{prodavac.ime}</td>\r\n                <td>{prodavac.prezime}</td>\r\n                <td>{prodavac.email}</td>\r\n                <td>{formatDate(prodavac.datumRodjenja)}</td>\r\n                <td>{prodavac.adresa}</td>\r\n                <td>{prodavac.postarina}</td>\r\n                <td>\r\n                  <button\r\n                    onClick={() =>\r\n                      handleVerifikacija(prodavac.id, prodavac.email)\r\n                    }\r\n                  >\r\n                    Verifikuj\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() =>\r\n                      handleOdbijVerifikaciju(prodavac.id, prodavac.email)\r\n                    }\r\n                  >\r\n                    Odbij verifikaciju\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n      <div>\r\n        <br />\r\n        <PrikazVerifikacija />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Verifikacija;\r\n","C:\\Users\\irenv\\Desktop\\dummy\\src\\components\\PrikazVerifikacija.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\services\\ArtikalService.js",[],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\services\\KorisnikService.js",["128"],[],"C:\\Users\\irenv\\Desktop\\dummy\\src\\helpers\\ProtectedRoute.js",[],[],{"ruleId":"129","severity":1,"message":"130","line":7,"column":27,"nodeType":"131","messageId":"132","endLine":7,"endColumn":43},{"ruleId":"129","severity":1,"message":"133","line":9,"column":10,"nodeType":"131","messageId":"132","endLine":9,"endColumn":29},{"ruleId":"129","severity":1,"message":"134","line":13,"column":10,"nodeType":"131","messageId":"132","endLine":13,"endColumn":23},{"ruleId":"129","severity":1,"message":"135","line":54,"column":9,"nodeType":"131","messageId":"132","endLine":54,"endColumn":26},{"ruleId":"129","severity":1,"message":"136","line":17,"column":12,"nodeType":"131","messageId":"132","endLine":17,"endColumn":30},{"ruleId":"129","severity":1,"message":"137","line":43,"column":19,"nodeType":"131","messageId":"132","endLine":43,"endColumn":27},{"ruleId":"129","severity":1,"message":"138","line":46,"column":11,"nodeType":"131","messageId":"132","endLine":46,"endColumn":26},{"ruleId":"129","severity":1,"message":"139","line":172,"column":11,"nodeType":"131","messageId":"132","endLine":172,"endColumn":23},{"ruleId":"129","severity":1,"message":"140","line":11,"column":11,"nodeType":"131","messageId":"132","endLine":11,"endColumn":19},{"ruleId":"129","severity":1,"message":"141","line":11,"column":21,"nodeType":"131","messageId":"132","endLine":11,"endColumn":32},{"ruleId":"129","severity":1,"message":"142","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"129","severity":1,"message":"134","line":11,"column":10,"nodeType":"131","messageId":"132","endLine":11,"endColumn":23},{"ruleId":"129","severity":1,"message":"135","line":89,"column":9,"nodeType":"131","messageId":"132","endLine":89,"endColumn":26},{"ruleId":"129","severity":1,"message":"143","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":15},{"ruleId":"129","severity":1,"message":"144","line":1,"column":8,"nodeType":"131","messageId":"132","endLine":1,"endColumn":17},"no-unused-vars","'setIsLoginFailed' is assigned a value but never used.","Identifier","unusedVar","'notificationVisible' is assigned a value but never used.","'UploadedImage' is assigned a value but never used.","'handleImageChange' is assigned a value but never used.","'selectedArtikliIds' is assigned a value but never used.","'setKorpa' is assigned a value but never used.","'odabraniArtikli' is assigned a value but never used.","'handlePoruci' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'json' is defined but never used.","'email' is assigned a value but never used.","'jwtDecode' is defined but never used."]