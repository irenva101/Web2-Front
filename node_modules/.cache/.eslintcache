[{"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\index.js":"1","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\App.js":"2","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\reportWebVitals.js":"3","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PocetnaStranica.js":"4","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\UlogovanKorisnik.js":"5","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Registracija.js":"6","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DodavanjeArtikla.js":"7","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Logovanje.js":"8","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Profil.js":"9","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrethodnePorudzbine.js":"10","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\StarePorudzbine.js":"11","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\NovePorudzbine.js":"12","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Verifikacija.js":"13","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PregledArtikala.js":"14","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrikazVerifikacija.js":"15","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\SvePorudzbine.js":"16","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\helpers\\ProtectedRoute.js":"17","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DetaljiArtikla.js":"18","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Korpa.js":"19","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\ArtikalService.js":"20","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\KorisnikService.js":"21"},{"size":554,"mtime":1692096003086,"results":"22","hashOfConfig":"23"},{"size":2941,"mtime":1692640771352,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1692096003086,"results":"25","hashOfConfig":"23"},{"size":382,"mtime":1692096003086,"results":"26","hashOfConfig":"23"},{"size":1845,"mtime":1692096003086,"results":"27","hashOfConfig":"23"},{"size":11061,"mtime":1692640612383,"results":"28","hashOfConfig":"23"},{"size":10394,"mtime":1692096003086,"results":"29","hashOfConfig":"23"},{"size":3849,"mtime":1692643168623,"results":"30","hashOfConfig":"23"},{"size":8706,"mtime":1692098945893,"results":"31","hashOfConfig":"23"},{"size":9131,"mtime":1692396326140,"results":"32","hashOfConfig":"23"},{"size":4097,"mtime":1692227875678,"results":"33","hashOfConfig":"23"},{"size":2478,"mtime":1692096003086,"results":"34","hashOfConfig":"23"},{"size":7074,"mtime":1692357492520,"results":"35","hashOfConfig":"23"},{"size":16380,"mtime":1692528972209,"results":"36","hashOfConfig":"23"},{"size":3866,"mtime":1692535774717,"results":"37","hashOfConfig":"23"},{"size":5383,"mtime":1692313251405,"results":"38","hashOfConfig":"23"},{"size":973,"mtime":1692096003086,"results":"39","hashOfConfig":"23"},{"size":739,"mtime":1692096003086,"results":"40","hashOfConfig":"23"},{"size":731,"mtime":1692096003086,"results":"41","hashOfConfig":"23"},{"size":751,"mtime":1692096003086,"results":"42","hashOfConfig":"23"},{"size":790,"mtime":1692096003086,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1b92ind",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"47"},"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\index.js",[],[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\App.js",["116","117","118","119","120","121","122","123","124","125"],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\reportWebVitals.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PocetnaStranica.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\UlogovanKorisnik.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Registracija.js",["126","127","128","129","130","131","132","133","134","135","136","137","138"],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DodavanjeArtikla.js",["139","140","141"],[],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport ImageUploader from \"../services/ArtikalService\";\r\nimport { json } from \"react-router-dom\";\r\n\r\nconst DodavanjeArtikla = () => {\r\n  const formRef = useRef(null);\r\n  const [artikli, setArtikli] = useState([]);\r\n  const [trenutniArtikal, setTrenutniArtikal] = useState(null);\r\n  const [showUpdateForm, setShowUpdateForm] = useState(false);\r\n  const [slikaArtikla, setSlikaArtikla] = useState(\"\");\r\n  const [UploadedImage, setUploadedImage] = useState(null);\r\n\r\n  const azurirajArtikal = (artikal) => {\r\n    setTrenutniArtikal(artikal);\r\n    setShowUpdateForm(true);\r\n  };\r\n\r\n  const handleImageUpload = (imageData) => {\r\n    setUploadedImage(imageData);\r\n    setSlikaArtikla(imageData);\r\n  };\r\n\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault();\r\n    // Logika za slanje ažuriranih podataka na server\r\n    const formDataToUpdate = {\r\n      id: trenutniArtikal.id, // Pretpostavka da artikal ima svoj ID\r\n      prodavacId: formRef.current.prodavacId.value,\r\n      naziv: formRef.current.naziv.value,\r\n      cena: formRef.current.cena.value,\r\n      kolicina: formRef.current.kolicina.value,\r\n      opis: formRef.current.opis.value,\r\n      slika: slikaArtikla\r\n    };\r\n\r\n\r\n    fetch(`https://localhost:44388/Artikal?idArtikla=${formDataToUpdate.id}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(formDataToUpdate),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Podaci su uspešno ažurirani na serveru:\", data);\r\n        // Nakon uspešnog ažuriranja podataka, sakrijemo formu za ažuriranje\r\n        setShowUpdateForm(false);\r\n        // Ažuriramo listu artikala da prikaže ažurirane podatke\r\n        setArtikli((prevArtikli) =>\r\n          prevArtikli.map((a) =>\r\n            a.id === formDataToUpdate.id ? formDataToUpdate : a\r\n          )\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greška prilikom slanja ažuriranih podataka na server:\",\r\n          error\r\n        );\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (trenutniArtikal) {\r\n      setFormData({\r\n        prodavacId: trenutniArtikal.prodavacId,\r\n        naziv: trenutniArtikal.naziv,\r\n        cena: trenutniArtikal.cena,\r\n        kolicina: trenutniArtikal.kolicina,\r\n        opis: trenutniArtikal.opis,\r\n        slika: trenutniArtikal.slika,\r\n      });\r\n    }\r\n  }, [trenutniArtikal]);\r\n\r\n  const [formData, setFormData] = useState({\r\n    prodavacId: 4, //zakucala na prodavac2\r\n    naziv: \"string\",\r\n    cena: 0,\r\n    kolicina: 0,\r\n    opis: \"string\",\r\n    slika: \"string\",\r\n  });\r\n\r\n  const handleImageChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      slika: e.target.files[0],\r\n    });\r\n  };\r\n\r\n  const obrisiArtikal = (artikal) => {\r\n    console.log(\"stigli smo dovde ale\");\r\n    const potvrdiBrisanje = window.confirm(\r\n      \"Da li želite da obrišete ovaj artikal?\"\r\n    );\r\n    if (potvrdiBrisanje) {\r\n      fetch(`https://localhost:44388/Artikal?idArtikla=${artikal.id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        mode: \"cors\",\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n          }\r\n          // Uklonite artikal iz liste nakon što ga uspešno obrišete\r\n          setArtikli((prevArtikli) =>\r\n            prevArtikli.filter((a) => a.id !== artikal.id)\r\n          );\r\n          console.log(\"Artikal uspešno obrisan.\");\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Greška prilikom brisanja artikla:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://localhost:44388/Artikal\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      // getAllArtikle()\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setArtikli(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greška prilikom dohvatanja artikala:\", error);\r\n      });\r\n    // setArtikli(getAllArtikle());\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n\r\n    var token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n\r\n    e.preventDefault();\r\n    //dalje ide lgika za slanje\r\n    const formDataToSend = {\r\n      prodavacId: formRef.current.prodavacId.value,\r\n      naziv: formRef.current.naziv.value,\r\n      cena: formRef.current.cena.value,\r\n      kolicina: formRef.current.kolicina.value,\r\n      opis: formRef.current.opis.value,\r\n      slika: slikaArtikla,\r\n    };\r\n\r\n    fetch(\"https://localhost:44388/Artikal\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(formDataToSend),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Podaci su uspesno poslati na server:\", data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greska prilikom slanja na server:\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dodavanje artikla</h1>\r\n      {showUpdateForm ? (\r\n        <form onSubmit={handleUpdate} ref={formRef}>\r\n          <label hidden>\r\n            ProdavacId:\r\n            <input\r\n              type=\"number\"\r\n              name=\"prodavacId\"\r\n              value={formData.prodavacId}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Naziv:\r\n            <input\r\n              type=\"text\"\r\n              name=\"naziv\"\r\n              value={formData.naziv} // Dodali smo vrednost iz formData za polje \"naziv\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Cena:\r\n            <input\r\n              type=\"number\"\r\n              name=\"cena\"\r\n              value={formData.cena} // Dodali smo vrednost iz formData za polje \"cena\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Kolicina:\r\n            <input\r\n              type=\"number\"\r\n              name=\"kolicina\"\r\n              value={formData.kolicina} // Dodali smo vrednost iz formData za polje \"kolicina\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Opis:\r\n            <input\r\n              type=\"text\"\r\n              name=\"opis\"\r\n              value={formData.opis} // Dodali smo vrednost iz formData za polje \"opis\"\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          \r\n          <label htmlFor=\"slika\">Slika:</label>\r\n          <ImageUploader onImageUpload={handleImageUpload} />\r\n\r\n          <button type=\"submit\">Sačuvaj ažuriranje</button>\r\n        </form>\r\n      ) : (\r\n        <form onSubmit={handleSubmit} ref={formRef}>\r\n          <label hidden>\r\n            ProdavacId:\r\n            <input\r\n              type=\"number\"\r\n              name=\"prodavacId\"\r\n              value={formData.prodavacId}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Naziv:\r\n            <input type=\"text\" name=\"naziv\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Cena:\r\n            <input type=\"number\" name=\"cena\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Kolicina:\r\n            <input type=\"number\" name=\"kolicina\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Opis:\r\n            <input type=\"text\" name=\"opis\" onChange={handleChange} />\r\n            <p></p>\r\n          </label>\r\n          <label htmlFor=\"slika\">Slika:</label>\r\n          <ImageUploader onImageUpload={handleImageUpload} />\r\n          <button type=\"submit\">Dodaj artikal</button>\r\n        </form>\r\n      )}\r\n\r\n      <div>\r\n        <h1>Prikaz svih artikala</h1>\r\n        <table>\r\n          <tr>\r\n            <th style={{ color: \"#279980\" }}>Naziv</th>\r\n            <th style={{ color: \"#279980\" }}>Cena</th>\r\n            <th style={{ color: \"#279980\" }}>Kolicina</th>\r\n            <th style={{ color: \"#279980\" }}>Opis</th>\r\n            <th style={{ color: \"#279980\" }}>Slika</th>\r\n          </tr>\r\n          {artikli.map((artikal) => (\r\n            <tr key={artikal.id}>\r\n              <td>{artikal.naziv}</td>\r\n              <td>\r\n                {artikal.cena.toLocaleString(\"sr-RS\", {\r\n                  style: \"currency\",\r\n                  currency: \"RSD\",\r\n                })}\r\n              </td>\r\n              <td>{artikal.kolicina}</td>\r\n              <td>{artikal.opis}</td>\r\n              <td>\r\n                <img src={artikal.slikaArtikla} alt=\"Uploaded\" style={{maxWidth: '100px'}}/>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    azurirajArtikal(artikal);\r\n                  }}\r\n                >\r\n                  Azuriraj\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" onClick={() => obrisiArtikal(artikal)}>\r\n                  Obrisi\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DodavanjeArtikla;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Logovanje.js",["142","143","144","145"],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Profil.js",["146"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport ImageUploader from \"../services/KorisnikService\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//testiramo dal se komituje na master\r\n\r\nconst Profil = () => {\r\n  const [formData, setFormData] = useState({\r\n    korisnickoIme: \"\",\r\n    email: \"\",\r\n    lozinka: \"\",\r\n    ime: \"\",\r\n    prezime: \"\",\r\n    datumRodjenja: \"2000-01-01\",\r\n    adresa: \"\",\r\n    tipKorisnika: 0,\r\n    slikaKorisnika: \"\",\r\n    verifikovan: true,\r\n    postarina: 0,\r\n  });\r\n\r\n  //state za cuvanje podatka sa server\r\n  const [korisnikPodaci, setKorisnikPodaci] = useState(null);\r\n\r\n  //state za cuvanje tipaKorisnika\r\n  const tipRef = useRef(0);\r\n  const postarinaRef = useRef(0);\r\n\r\n  const formRef = useRef(null);\r\n\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\r\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  //rad sa slikom\r\n  const [UploadedImage, setUploadedImage] = useState(null);\r\n  const handleImageUpload = (imageData) => {\r\n    setUploadedImage(imageData);\r\n  };\r\n\r\n  var token = localStorage.getItem(\"token\");\r\n  const decodedToken = jwtDecode(token);\r\n  console.log(decodedToken[\"Id\"]);\r\n  useEffect(() => {\r\n    fetch(`https://localhost:44388/Korisnik?idKorisnika=${decodedToken[\"Id\"]}`, {\r\n      //zakucala jednog korisnika\r\n      method: \"GET\",\r\n      // body: JSON.stringify(formData), //ne mogu slati body u get zahtevu\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((Response) => Response.json())\r\n      .then((data) => {\r\n        //obrada odgovora servera\r\n        console.log(data);\r\n        tipRef.current = data.tipKorisnika;\r\n        postarinaRef.current = data.postarinaRef;\r\n        //foramtiranje datuma\r\n        const datumRodjenja = data.datumRodjenja; //2023-07-25T00:00:00\r\n        const formattedDateString = datumRodjenja.split(\"T\")[0];\r\n        data.datumRodjenja = formattedDateString;\r\n        //console.log(formattedDateString+\" ******db->forma\");\r\n        setKorisnikPodaci(data);\r\n        setFormData(data);\r\n      })\r\n      .catch((error) => {\r\n        //obrada greske\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n\r\n    if (name === \"lozinka\") {\r\n      // Ako se menja polje za šifru, ažuriraj i polje za potvrdu šifre\r\n      setPasswordConfirmation(\"\");\r\n    }\r\n  };\r\n\r\n  const handlePasswordConfirmationChange = (e) => {\r\n    const confirmedPassword = e.target.value;\r\n    setPasswordConfirmation(e.target.value);\r\n\r\n    // Proveri da li unete šifre i potvrda šifre odgovaraju\r\n    if (formData.lozinka === confirmedPassword) {\r\n      setPasswordsMatch(true);\r\n    } else {\r\n      setPasswordsMatch(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Fetch zahtev za slanje izmenjenih podataka na server\r\n    //formatiranje datuma za slanje nazad serveru\r\n    if (formData.lozinka !== passwordConfirmation) {\r\n      console.log(\"Šifre se ne podudaraju.\");\r\n      return;\r\n    }\r\n\r\n    const zaKonvertovanje = formData.datumRodjenja; //\"28-7-2023\"\r\n    const formattedDateString = zaKonvertovanje + \"T23:00:00.000Z\";\r\n\r\n    const formDataToSend = {\r\n      korisnickoIme: formRef.current.korisnickoIme.value,\r\n      email: formRef.current.email.value,\r\n      lozinka: formRef.current.lozinka.value,\r\n      ime: formRef.current.ime.value,\r\n      prezime: formRef.current.prezime.value,\r\n      datumRodjenja: formattedDateString,\r\n      adresa: formRef.current.adresa.value,\r\n      tipKorisnika: tipRef.current.value,\r\n      slikaKorisnika: UploadedImage,\r\n      postarina: postarinaRef.current,\r\n    };\r\n\r\n    fetch(`https://localhost:44388/Korisnik?idKorisnika=${decodedToken[\"Id\"]}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(formDataToSend),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Podaci su uspešno poslati na server:\", data);\r\n        setIsSuccess(true);\r\n      })\r\n      .catch((error) => {\r\n        // Obrada greške\r\n        console.error(\"Greška prilikom slanja podataka na server:\", error);\r\n        setIsSuccess(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Profil</h2>\r\n      {korisnikPodaci ? (\r\n        <form onSubmit={handleSubmit} ref={formRef}>\r\n          <label>\r\n            Korisnicko ime:\r\n            <input\r\n              type=\"text\"\r\n              name=\"korisnickoIme\"\r\n              value={formData.korisnickoIme}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            E-mail:\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Lozinka:\r\n            <input\r\n              type=\"password\"\r\n              name=\"lozinka\"\r\n              value={formData.lozinka}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Potvrda lozinke:\r\n            <input\r\n              type=\"password\"\r\n              name=\"potvrdaLozinke\"\r\n              value={passwordConfirmation}\r\n              onChange={handlePasswordConfirmationChange}\r\n            />\r\n            {passwordsMatch ? null : (\r\n              <p style={{ color: \"red\" }}>Šifre se ne podudaraju.</p>\r\n            )}\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Ime:\r\n            <input\r\n              type=\"text\"\r\n              name=\"ime\"\r\n              value={formData.ime}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Prezime:\r\n            <input\r\n              type=\"text\"\r\n              name=\"prezime\"\r\n              value={formData.prezime}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Datum rodjenja:\r\n            <input\r\n              type=\"date\"\r\n              name=\"datumRodjenja\"\r\n              value={formData.datumRodjenja}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Adresa:\r\n            <input\r\n              type=\"text\"\r\n              name=\"adresa\"\r\n              value={formData.adresa}\r\n              onChange={handleChange}\r\n            />\r\n            <p></p>\r\n          </label>\r\n          <label>\r\n            Slika:\r\n            <ImageUploader onImageUpload={handleImageUpload} />\r\n            <p></p>\r\n          </label>\r\n          {formData.tipKorisnika === \"Prodavac\" && (\r\n            <div>\r\n              <label htmlFor=\"postarina\">Postarina:</label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"postarina\"\r\n                name=\"postarina\"\r\n                value={formData.postarina}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              <br />\r\n            </div>\r\n          )}\r\n          <button type=\"submit\">Sacuvaj izmene</button>\r\n          {isSuccess && (\r\n            <p style={{ color: \"green\" }}>Podaci su uspešno ažurirani!</p>\r\n          )}\r\n        </form>\r\n      ) : (\r\n        <p>Ucitavanje podataka...</p>\r\n      )}\r\n\r\n      <div className=\"user-details\">\r\n        <h3>Detalji korisnika</h3>\r\n        {korisnikPodaci && (\r\n          <div>\r\n            <p>Korisnicko ime: {korisnikPodaci.korisnickoIme}</p>\r\n            <p>Email: {korisnikPodaci.email}</p>\r\n            <p>Ime: {korisnikPodaci.ime}</p>\r\n            <p>Prezime: {korisnikPodaci.prezime}</p>\r\n            <p>Datum rodjenja: {korisnikPodaci.datumRodjenja}</p>\r\n            <p>Adresa: {korisnikPodaci.adresa}</p>\r\n            <p>\r\n              Slika:\r\n              <img\r\n                src={korisnikPodaci.slikaKorisnika}\r\n                alt=\"Uploaded\"\r\n                style={{ maxWidth: \"100px\" }}\r\n              />\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <Link to=\"/ulogovan-korisnik\">Nazad na pocetnu stranicu</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profil;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrethodnePorudzbine.js",["147","148","149"],[],"import React, { useEffect, useState } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst PrethodnePorudzbine = () => {\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState(\"naziv\");\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const [preostaloVreme, setPreostaloVreme] = useState({});\r\n\r\n  const [formData, setFormData] = useState({\r\n    korisnikId: 0,\r\n    adresaDostave: \"string\",\r\n    komentar: \"string\",\r\n    artikli: [\r\n      {\r\n        prodavacId: 0,\r\n        naziv: \"string\",\r\n        cena: 0,\r\n        kolicina: 0,\r\n        opis: \"string\",\r\n        slika: \"string\",\r\n      },\r\n    ],\r\n    vremeIsporuke: \"2000-18-06T18:48:23.437Z\",\r\n  });\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date\r\n      .getDate()\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const year = date.getFullYear();\r\n    return `${day}-${month}-${year}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    var index = decodedToken[\"Id\"];\r\n    //console.log(decodedToken[\"Id\"]);\r\n\r\n    fetch(\r\n      `https://localhost:44388/Porudzbina/allPorudzbineKorisnika?idKorisnika=${index}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((responce) => responce.json())\r\n      .then((data) => {\r\n        //obrada odgovora servera\r\n        setPorudzbine(data);\r\n        console.log(data);\r\n        //console.log(data[0][\"vremeIsporuke\"]);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const filteredPorudzbine = porudzbine.filter((porudzbine) => {\r\n    return porudzbine.artikli.some((artikal) =>\r\n      artikal.naziv.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  });\r\n\r\n  const sortedPorudzbine = [...filteredPorudzbine];\r\n\r\n  if (sortOption === \"naziv\") {\r\n    sortedPorudzbine.sort((a, b) =>\r\n      a.artikli[0].naziv.localeCompare(b.artikli[0].naziv)\r\n    );\r\n  } else if (sortOption === \"datum\") {\r\n    sortedPorudzbine.sort((a, b) => {\r\n      console.log(JSON.stringify(sortedPorudzbine));\r\n      if (sortOrder === \"asc\") {\r\n        return new Date(a.vremeIsporuke) - new Date(b.vremeIsporuke);\r\n      } else {\r\n        return new Date(b.vremeIsporuke) - new Date(a.vremeIsporuke);\r\n      }\r\n    });\r\n  }\r\n  //u principu bih trebala da sortiram po datumu, to ima najvise smisla\r\n\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const endTimeMillis = new Date(endTime).getTime();\r\n    return Math.max(0, endTimeMillis - currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ... ostatak vašeg postojećeg useEffect-a ...\r\n\r\n    // Pokretanje intervala za ažuriranje preostalog vremena svake sekunde\r\n    const interval = setInterval(() => {\r\n      const updatedRemainingTimes = {};\r\n\r\n      porudzbine.forEach((porudzbina) => {\r\n        const remainingTime = calculateRemainingTime(porudzbina.vremeIsporuke);\r\n        updatedRemainingTimes[porudzbina.id] = remainingTime;\r\n      });\r\n\r\n      setPreostaloVreme(updatedRemainingTimes);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [porudzbine]);\r\n\r\n  // Funkcija za formatiranje preostalog vremena\r\n  const formatRemainingTime = (remainingTime) => {\r\n    const days = Math.floor(remainingTime / (24 * 60 * 60 * 1000));\r\n    const hours = Math.floor(\r\n      (remainingTime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)\r\n    );\r\n    const minutes = Math.floor(\r\n      (remainingTime % (60 * 60 * 1000)) / (60 * 1000)\r\n    );\r\n    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n\r\n  const otkaziPorudzbinu = (porudzbinaId) => {\r\n    const existingPorudzbina = porudzbine.find(\r\n      (item) => item.id === porudzbinaId\r\n      \r\n    );\r\n    console.log(porudzbine);\r\n    console.log(\"JESMO LI DOBACILI DO OVDE\");\r\n    console.log(\"PORUDZBINA--------\"+porudzbinaId+\"+++++++++++\");\r\n    console.log(existingPorudzbina);\r\n    \r\n    \r\n\r\n    // const vremeIsporuke=porudzbinaZaOtkazivanje[\"vremeIsporuke\"];\r\n    // const vremePorucivanja=porudzbinaZaOtkazivanje[\"vremePorucivanja\"];\r\n\r\n    // console.log(vremeIsporuke+\"+++++++++++\"+vremePorucivanja);\r\n\r\n    if (existingPorudzbina) {\r\n      //otkazi porudzbinu\r\n      fetch(\r\n        `https://localhost:44388/Porudzbina/cancelPorudzbina`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(existingPorudzbina),\r\n          mode: \"cors\",\r\n        }\r\n      )\r\n        .then((responce) => responce.json())\r\n        .then((data) => {\r\n          alert(\"Uspesno je otkazana porudzbina\");\r\n          console.log(data);\r\n        })\r\n        .catch((error) => {\r\n          alert(\"Greška prilikom otkazivanja porudzbine\");\r\n          console.error(\"Greška prilikom otkazivanja porudzbine\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  function otkazivanjeUPrvihSatVremena(id) {\r\n    const porudzbina = porudzbine.find((p) => p.id === id);\r\n\r\n    if (!porudzbina) {\r\n      console.log(\"Porudžbina sa datim ID nije pronađena\");\r\n      return false; // Porudžbina sa datim ID nije pronađena\r\n    }\r\n\r\n    const trenutnoVreme = new Date();\r\n    //console.log(\"Trenutno vreme: \"+ trenutnoVreme);\r\n    const satVremenaUnapred = new Date(\r\n      trenutnoVreme.getTime() + 60 * 60 * 1000\r\n    );\r\n    //console.log(\"Sat vremena unazad: \"+ satVremenaUnapred);\r\n    //console.log(porudzbina.vremePorucivanja >= satVremenaUnapred);\r\n    return porudzbina.vremePorucivanja >= satVremenaUnapred;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Prethodne porudzbine</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Unesite naziv artikla za pretragu\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n      />\r\n      <select\r\n        value={sortOption}\r\n        onChange={(e) => setSortOption(e.target.value)}\r\n      >\r\n        <option value=\"naziv\">Sortiraj po nazivu</option>\r\n        <option value=\"datum\">Sortiraj po datumu</option>\r\n      </select>\r\n      <button\r\n        onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\r\n      >\r\n        {sortOrder === \"asc\"\r\n          ? \"Sortiraj po datumu (rastuce)\"\r\n          : \"Sortiraj po datumu (opadajuce)\"}\r\n      </button>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th style={{ color: \"#279980\" }}>Adresa dostave</th>\r\n            <th style={{ color: \"#279980\" }}>Artikli</th>\r\n            <th style={{ color: \"#279980\" }}>Komentar</th>\r\n            <th style={{ color: \"#279980\" }}>Vreme isporuke</th>\r\n            <th style={{ color: \"#279980\" }}>Otkazati?</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedPorudzbine\r\n            .filter((porudzbina) => !porudzbina.otkazana) //ne prikazuje otkazane porudzbine\r\n            .map((porudzbina) => (\r\n              <tr key={porudzbina.vremeIsporuke}>\r\n                <td>{porudzbina.adresaDostave}</td>\r\n                <td>\r\n                  {porudzbina.artikli.map((artikal) => (\r\n                    <div className=\"artikal-kartica\" key={artikal.Id}>\r\n                      <img\r\n                        src={artikal.slika}\r\n                        alt={artikal.naziv}\r\n                        className=\"artikal-slika\"\r\n                        style={{ width: \"100px\" }}\r\n                      />\r\n                      <p className=\"artikal-naziv\">{artikal.naziv}</p>\r\n                      <p className=\"artikal-cijena\">Cena: {artikal.cena}</p>\r\n                      <p className=\"artikal-opis\">Opis: {artikal.opis}</p>\r\n                    </div>\r\n                  ))}\r\n                </td>\r\n                <td>{porudzbina.komentar}</td>\r\n                <td>\r\n                  {/* Prikaz preostalog vremena */}\r\n                  {preostaloVreme[porudzbina.id] > 0\r\n                    ? formatRemainingTime(preostaloVreme[porudzbina.id])\r\n                    : \"Isporuceno\"}\r\n                </td>\r\n                <td>\r\n                  {!porudzbina.otkazana &&\r\n                    !otkazivanjeUPrvihSatVremena(porudzbina.id) &&\r\n                    preostaloVreme[porudzbina.id] > 0 && (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          otkaziPorudzbinu(porudzbina.id);\r\n                        }}\r\n                      >\r\n                        Otkazi\r\n                      </button>\r\n                    )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrethodnePorudzbine;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\StarePorudzbine.js",["150"],[],"import React, { useEffect, useState } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst StarePorudzbine = () => {\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [preostaloVreme, setPreostaloVreme] = useState({});\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      hour12: false,\r\n    };\r\n    return new Date(dateString)\r\n      .toLocaleDateString(\"en-US\", options)\r\n      .replace(\",\", \"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n\r\n    fetch(\r\n      `https://localhost:44388/Porudzbina/allPorudzbineProdavcaStare?korisnikId=${decodedToken[\"Id\"]}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setPorudzbine(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const endTimeMillis = new Date(endTime).getTime();\r\n    return Math.max(0, endTimeMillis - currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ... ostatak vašeg postojećeg useEffect-a ...\r\n\r\n    // Pokretanje intervala za ažuriranje preostalog vremena svake sekunde\r\n    const interval = setInterval(() => {\r\n      const updatedRemainingTimes = {};\r\n\r\n      porudzbine.forEach((porudzbina) => {\r\n        const remainingTime = calculateRemainingTime(porudzbina.vremeIsporuke);\r\n        updatedRemainingTimes[porudzbina.id] = remainingTime;\r\n      });\r\n\r\n      setPreostaloVreme(updatedRemainingTimes);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [porudzbine]);\r\n\r\n  const formatRemainingTime = (remainingTime) => {\r\n    const days = Math.floor(remainingTime / (24 * 60 * 60 * 1000));\r\n    const hours = Math.floor(\r\n      (remainingTime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)\r\n    );\r\n    const minutes = Math.floor(\r\n      (remainingTime % (60 * 60 * 1000)) / (60 * 1000)\r\n    );\r\n    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ color: \"#279980\" }}>Moje porudzbine</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th style={{ color: \"#279980\" }}>Adresa Dostave</th>\r\n            <th style={{ color: \"#279980\" }}>Komentar</th>\r\n            <th style={{ color: \"#279980\" }}>Vreme isporuke</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {porudzbine.map((porudzbina, index) => (\r\n            <tr key={index}>\r\n              <td>{porudzbina.adresaDostave}</td>\r\n              <td>{porudzbina.komentar}</td>\r\n              <td>\r\n                  {/* Prikaz preostalog vremena */}\r\n                  {preostaloVreme[porudzbina.id] > 0\r\n                    ? formatRemainingTime(preostaloVreme[porudzbina.id])\r\n                    : \"Isporuceno\"}\r\n                </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarePorudzbine;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\NovePorudzbine.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Verifikacija.js",["151"],[],"import React, { useState, useEffect } from \"react\";\r\nimport PrikazVerifikacija from \"./PrikazVerifikacija\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst Verifikacija = () => {\r\n  const [prodavac, setProdavce] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" };\r\n    return new Date(dateString)\r\n      .toLocaleDateString(\"en-US\", options)\r\n      .replace(/\\//g, \"-\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n    //slanje tokena u zaglavlju svakog zahteva\r\n\r\n    fetch(\"https://localhost:44388/Korisnik/neverProdavce\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`Network response was not ok.`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setProdavce(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Greska prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleVerifikacija = (index, email) => {\r\n    // Implementirajte logiku za verifikaciju\r\n    console.log(`Verifikacija prodavca sa indeksom ${index}`);\r\n    setEmail(email);\r\n\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, vasa registracija je odobrena.\",\r\n    };\r\n\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n\r\n    fetch(`https://localhost:44388/Korisnik/verProdavca?idKorisnika=${index}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(index),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //ovde odradi fetch za post za slanje mejla\r\n        fetch(\"https://localhost:44388/Email/emailService\", {\r\n          body: JSON.stringify(emailData),\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          mode: \"cors\",\r\n        })\r\n          .then((Response) => Response.json())\r\n          .then((data) => {\r\n            console.log(\"Poslali mejl da smo validirali nalog.\");\r\n          })\r\n          .catch((error) => {\r\n            //obrada greske\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleOdbijVerifikaciju = (index, email) => {\r\n    // Implementirajte logiku za odbijanje verifikacije\r\n    console.log(`Odbijanje verifikacije prodavca sa indeksom ${index}`);\r\n\r\n    setEmail(email);\r\n    const emailData = {\r\n      Receiver: email,\r\n      Subject: \"Registracija(WEB2)\",\r\n      Body: \"Postovani, vasa registracija je odbijena.\",\r\n    };\r\n\r\n    var token = localStorage.getItem(\"token\");\r\n\r\n    fetch(\r\n      `https://localhost:44388/Korisnik/neverProdavca?idKorisnika=${index}`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(index),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        mode: \"cors\",\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //fetch za odbijanje verifikacije\r\n        fetch(\"https://localhost:44388/Email/emailService\", {\r\n          body: JSON.stringify(emailData),\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\",\r\n        })\r\n          .then((Response) => Response.json())\r\n          .then((data) => {\r\n            console.log(\"Poslali mejl da odbijemo validaciju.\");\r\n          })\r\n          .catch((error) => {\r\n            //obrada greske\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ color: \"#279980\" }}>\r\n        Prodavci koji cekaju na verifikaciju naloga\r\n      </h1>\r\n\r\n      {loading ? (\r\n        <p>Učitavanje...</p>\r\n      ) : prodavac.length === 0 ? (\r\n        <p>Trenutno nema korisnika koji cekaju na verifikaciju.</p>\r\n      ) : (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Slika</th>\r\n              <th>Korisnicko Ime</th>\r\n              <th>Ime</th>\r\n              <th>Prezime</th>\r\n              <th>Email</th>\r\n              <th>Datum rodjenja</th>\r\n              <th>Adresa</th>\r\n              <th>Postarina</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {prodavac.map((prodavac) => (\r\n              <tr key={prodavac.id}>\r\n                <td>\r\n                  <img\r\n                    src={prodavac.slikaKorisnika}\r\n                    alt=\"Ucitavnje slike\"\r\n                    style={{ width: \"100px\" }}\r\n                  />\r\n                </td>\r\n                <td>{prodavac.korisnickoIme}</td>\r\n                <td>{prodavac.ime}</td>\r\n                <td>{prodavac.prezime}</td>\r\n                <td>{prodavac.email}</td>\r\n                <td>{formatDate(prodavac.datumRodjenja)}</td>\r\n                <td>{prodavac.adresa}</td>\r\n                <td>{prodavac.postarina}</td>\r\n                <td>\r\n                  <button\r\n                    onClick={() =>\r\n                      handleVerifikacija(prodavac.id, prodavac.email)\r\n                    }\r\n                  >\r\n                    Verifikuj\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() =>\r\n                      handleOdbijVerifikaciju(prodavac.id, prodavac.email)\r\n                    }\r\n                  >\r\n                    Odbij verifikaciju\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n      <div>\r\n        <br />\r\n        <PrikazVerifikacija />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Verifikacija;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PregledArtikala.js",["152","153","154","155","156","157","158","159"],[],"import React, { useEffect, useState } from \"react\";\r\nimport DetaljiArtikla from \"./DetaljiArtikla\";\r\nimport chartSlika from \"../images/chart.png\";\r\nimport Korpa from \"./Korpa\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst PregledArtikala = () => {\r\n  const [artikli, setArtikli] = useState([]);\r\n  const [selectedArtikal, setSelectedArtikal] = useState(null);\r\n\r\n  const [adresa, setAdresa] = useState(\"\");\r\n  const [komentar, setKomentar] = useState(\"\");\r\n  const [cartItems, setCartItems] = useState([]);\r\n  // Globalna promenljiva za ID-jeve artikala\r\n  const [selectedArtikliIds, setSelectedArtikliIds] = useState([]);\r\n  const [kolicina, setKolicina] = useState(\"\");\r\n\r\n  const formatiranoVremeIsporuke = (vremePorucivanja) => {\r\n    console.log(\"VREME PORUCIVANJA: \"+vremePorucivanja);\r\n    if(vremePorucivanja){\r\n      const minutiZaDodati = Math.floor(Math.random() * 100) + 60;\r\n      //console.log(\"Minuti za dodati: \"+minutiZaDodati);\r\n      const novoVreme = new Date(vremePorucivanja);\r\n      novoVreme.setMinutes(vremePorucivanja.getMinutes() + minutiZaDodati);\r\n      console.log(\"VREME ISPORUKE: \"+ novoVreme);\r\n      return novoVreme;\r\n      \r\n    }else{\r\n      return alert(\"VREME PORUCIVANJA NULL\");\r\n    }\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState(\"naziv\");\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const [korpa, setKorpa] = useState(0);\r\n  const [ukupanIznos, setUkupanIznos] = useState(0);\r\n  const [showPregledPorudzbine, setShowPregledPorudzbine] = useState(false);\r\n  const odabraniArtikli = cartItems.filter((item) => item.kolicina > 0);\r\n  const [prodavci, setProdavci] = useState(\"\");\r\n  //const [vremePorucivanja, setVremePorucivanja] = useState(new Date());\r\n  //console.log(vremePorucivanja);\r\n\r\n  const posaljiPorudzbinuNaServer=()=>{\r\n    // Prvo kreiramo objekat koji sadrži sve potrebne informacije za porudžbinu\r\n    \r\n    console.log(\"Cart items: \" + JSON.stringify(cartItems));\r\n    const newSelectedArtikliIds = [];\r\n    cartItems.forEach((item) => {\r\n      for (let i = 0; i < item.kolicina; i++) {\r\n        newSelectedArtikliIds.push(item.artikal.id);\r\n      }\r\n    });\r\n    setSelectedArtikliIds(newSelectedArtikliIds);\r\n\r\n    console.log(newSelectedArtikliIds);\r\n    console.log(artikli);\r\n\r\n    const zaSlanje = newSelectedArtikliIds.reduce(\r\n      (selectedArtikli, artikalId) => {\r\n        const artikal = artikli.find((artikal) => artikal.id === artikalId);\r\n        if (artikal) {\r\n          selectedArtikli.push(artikal);\r\n        }\r\n        return selectedArtikli;\r\n      },\r\n      []\r\n    );\r\n\r\n    console.log(JSON.stringify(zaSlanje) + \"+++++++++++++++++++++++++++++++\");\r\n\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n    if (!token) {\r\n      console.error(\"Token nije prisutan u localStorage-u.\");\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko token nije prisutan.\r\n    }\r\n\r\n    // Pretpostavićemo da se JWT token sastoji iz tri dela (header, payload, signature) razdvojenih tačkom.\r\n    var tokenParts = token.split(\".\");\r\n    if (tokenParts.length !== 3) {\r\n      console.error(\"Neispravan format tokena.\");\r\n\r\n      return; // Ovde možete izvršiti odgovarajuće akcije ukoliko format nije ispravan.\r\n    }\r\n\r\n    const vremePorucivanja=new Date();\r\n    const vremeIsporuke = formatiranoVremeIsporuke(vremePorucivanja);\r\n\r\n    console.log(\"-----------------VREME PORUCIVANJA: \"+ vremePorucivanja);\r\n    console.log(\"-----------------VREME ISPORUKE :\"+ vremeIsporuke);\r\n    \r\n    const porudzbina = {\r\n      artikli: zaSlanje,\r\n      ukupanIznos: ukupanIznos,\r\n      adresaDostave: adresa,\r\n      komentar: komentar,\r\n      korisnikId: decodedToken[\"Id\"],\r\n      vremePorucivanja: vremePorucivanja,\r\n      vremeIsporuke: vremeIsporuke,\r\n      otkazana: false,\r\n    };\r\n\r\n    console.log(JSON.stringify(porudzbina));\r\n\r\n    fetch(\"https://localhost:44388/Porudzbina\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(porudzbina),\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // uspesno poslato serveru\r\n        console.log(\"Sta saljem:\");\r\n        console.log(data);\r\n        alert(\"Porudžbina je uspešno poslata!\");\r\n\r\n        setCartItems([]); // Resetujemo korpu nakon što je porudžbina poslata\r\n        setUkupanIznos(0); // Resetujemo ukupan iznos nakon što je porudžbina poslata\r\n        setAdresa(\"\"); // Resetujemo polje za adresu nakon što je porudžbina poslata\r\n        setKomentar(\"\"); // Resetujemo polje za komentar nakon što je porudžbina poslata\r\n      })\r\n      .catch((error) => {\r\n        //greska prilikom slanja na server\r\n        console.error(\"Greška prilikom slanja porudžbine:\", error);\r\n        alert(\"Došlo je do greške prilikom slanja porudžbine.\");\r\n      });\r\n\r\n    // Zatim koristimo fetch funkciju za slanje POST zahteva na server\r\n    setTimeout(() => {\r\n      fetch(\"https://localhost:44388/Artikal/UpdateKolicinu\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          //Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(zaSlanje),\r\n        mode: \"cors\",\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // uspesno poslato serveru\r\n          console.log(\"Artikli koje saljem za smanjenje kolicine:\");\r\n          console.log(data);\r\n          alert(\"Uspesno je smanjena kolicina artikala.\");\r\n        })\r\n        .catch((error) => {\r\n          //greska prilikom slanja na server\r\n          console.error(\"Greška prilikom smanjenja kolicine:\", error);\r\n        });\r\n    }, 2000);\r\n    //nakon sto sam poslala porudzbinu da smanjim broj artikala\r\n  };\r\n\r\n  //funkcija koja dobavlja cenu postarine konkretnog prodavca\r\n  function postarinaProdavca(cartItems) {\r\n    //provera ako ima dva artikla od istog Pordavca\r\n    const postarinaMap = new Map();\r\n\r\n    cartItems.forEach((item) => {\r\n      const idProdavca = item.artikal[\"prodavacID\"];\r\n      const kolicina = item.kolicina;\r\n      const postarina = postarinaMap.get(idProdavca) || 0;\r\n\r\n      console.log(\r\n        \"Id prodavca: \" +\r\n          idProdavca +\r\n          \"kolicina: \" +\r\n          kolicina +\r\n          \"Postarina: \" +\r\n          postarina\r\n      );\r\n\r\n      const trazeniProdavac = prodavci.find(\r\n        (prodavac) => prodavac.id === idProdavca\r\n      );\r\n\r\n      const postarinaTrazenogProdavca = trazeniProdavac.postarina;\r\n      postarinaMap.set(\r\n        idProdavca,\r\n        postarina + kolicina * postarinaTrazenogProdavca\r\n      );\r\n    });\r\n\r\n    let ukupnaPostarina = 0;\r\n\r\n    // Saberi sve postarine\r\n    postarinaMap.forEach((postarina) => {\r\n      ukupnaPostarina += postarina;\r\n    });\r\n\r\n    return ukupnaPostarina;\r\n  }\r\n\r\n  useEffect(() => {\r\n    var token = localStorage.getItem(\"token\");\r\n    const decodedToken = jwtDecode(token);\r\n    console.log(decodedToken[\"Id\"]);\r\n\r\n    fetch(\"https://localhost:44388/Artikal\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((responce) => responce.json())\r\n      .then((data) => {\r\n        //obrada odgovora servera\r\n        console.log(data); //ovde dobijem prodavac Id\r\n        setArtikli(data);\r\n      })\r\n      .catch((error) => {\r\n        //obrada greske\r\n        console.error(\r\n          \"Greška prilikom dobavljanja podataka sa servera:\",\r\n          error\r\n        );\r\n      });\r\n\r\n    //fetch sa dobavljanje svih prodavaca(da bi preko idProdavca dobili postarinu)\r\n    fetch(\"https://localhost:44388/Prodavac/allProdavci\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        //Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"(GET) Svi prodavci:\");\r\n        console.log(data);\r\n        setProdavci(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greška prilikom dobavljanja prodavaca:\", error);\r\n        alert(\"Došlo je do greške prilikom dobavljanja prodavaca.\");\r\n      });\r\n  }, []); //prazan dependency niz što znači da će se izvršiti samo prilikom prvog renderovanja komponente.\r\n\r\n  useEffect(() => {\r\n    if (cartItems.length === 0) {\r\n      setShowPregledPorudzbine(false);\r\n    }\r\n  }, [cartItems]);\r\n\r\n  const filteredArtikli = artikli.filter((artikal) => {\r\n    return artikal.naziv.toLowerCase().includes(searchTerm.toLowerCase());\r\n  });\r\n\r\n  const dodajUKorpu = (artikal) => {\r\n    const existingItem = cartItems.find(\r\n      (item) => item.artikal.id === artikal.id\r\n    );\r\n    //console.log(\"*******\" + artikal.id + \"**************\");\r\n    if (existingItem) {\r\n      if (existingItem.kolicina >= artikal.kolicina) {\r\n        alert(\"Dostignuta je maksimalna količina za ovaj artikal.\");\r\n        return;\r\n      }\r\n\r\n      setCartItems(\r\n        cartItems.map((item) =>\r\n          item.artikal.id === artikal.id\r\n            ? { ...item, kolicina: item.kolicina + 1 }\r\n            : item\r\n        )\r\n      );\r\n    } else {\r\n      setCartItems([...cartItems, { artikal, kolicina: 1, cena: 0 }]);\r\n    }\r\n\r\n    setUkupanIznos(ukupanIznos + artikal.cena);\r\n  };\r\n\r\n  const obrisiIzKorpe = (artikal) => {\r\n    const existingItem = cartItems.find(\r\n      (item) => item.artikal.id === artikal.id\r\n    );\r\n    if (existingItem) {\r\n      if (existingItem.kolicina === 1) {\r\n        setCartItems(\r\n          cartItems.filter((item) => item.artikal.id !== artikal.id)\r\n        );\r\n      } else {\r\n        setCartItems(\r\n          cartItems.map((item) =>\r\n            item.artikal.id === artikal.id\r\n              ? { ...item, kolicina: item.kolicina - 1 }\r\n              : item\r\n          )\r\n        );\r\n      }\r\n\r\n      setUkupanIznos(ukupanIznos - artikal.cena);\r\n    }\r\n  };\r\n\r\n  const handlePoruci = () => {\r\n    // Ovde možete implementirati logiku za slanje porudžbine na server, resetovanje korpe, ili nešto drugo što želite\r\n    alert(\"Porudžbina je uspešno poslata!\");\r\n    setCartItems([]);\r\n    setUkupanIznos(0);\r\n  };\r\n\r\n  const sortedArtikli = [...filteredArtikli]; // Kreiramo kopiju niza kako bismo sačuvali originalni niz nepromenjen\r\n\r\n  if (sortOption === \"naziv\") {\r\n    // Sortiranje po nazivu (abecedno)\r\n    sortedArtikli.sort((a, b) => a.naziv.localeCompare(b.naziv));\r\n  } else if (sortOption === \"cena\") {\r\n    // Sortiranje po ceni\r\n    sortedArtikli.sort((a, b) => {\r\n      if (sortOrder === \"asc\") {\r\n        return a.cena - b.cena; // Sortiranje od najjeftinijeg do najskupljeg\r\n      } else {\r\n        return b.cena - a.cena; // Sortiranje od najskupljeg do najjeftinijeg\r\n      }\r\n    });\r\n  }\r\n\r\n  function ukupnaPostarina(cartItems) {\r\n    //provera ako ima dva artikla od istog Pordavca\r\n    const listaIdjevaProdavaca = [];\r\n\r\n    cartItems.forEach((item) => {\r\n      const idProdavca = item.artikal[\"prodavacID\"];\r\n\r\n      if (!listaIdjevaProdavaca.includes(idProdavca)) {\r\n        listaIdjevaProdavaca.push(idProdavca);\r\n      }\r\n    });\r\n\r\n    let ukupnaPostarina = 0;\r\n\r\n    const filtriraniProdavci = prodavci.filter((prodavac) =>\r\n      listaIdjevaProdavaca.includes(prodavac.id)\r\n    );\r\n\r\n    filtriraniProdavci.forEach((prodavac) => {\r\n      ukupnaPostarina += prodavac.postarina;\r\n    });\r\n\r\n    return ukupnaPostarina;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ position: \"absolute\", top: \"20px\", right: \"20px\" }}>\r\n        <img\r\n          src={chartSlika}\r\n          alt=\"Korpa\"\r\n          style={{ width: \"40px\", height: \"40px\" }}\r\n        />\r\n        <span>{korpa}</span>\r\n      </div>\r\n\r\n      <h1 style={{ color: \"#279980\" }}>Dostupni artikli</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Unesite naziv artikla za pretragu\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n      />\r\n      <select\r\n        value={sortOption}\r\n        onChange={(e) => setSortOption(e.target.value)}\r\n      >\r\n        <option value=\"naziv\">Sortiraj po nazivu</option>\r\n        <option value=\"cena\">Sortiraj po ceni</option>\r\n      </select>\r\n      <button\r\n        onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\r\n      >\r\n        {sortOrder === \"asc\"\r\n          ? \"Sortiraj po ceni (rastuce)\"\r\n          : \"Sortiraj po ceni (opadajuce)\"}\r\n      </button>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th style={{ color: \"#279980\" }}>Naziv</th>\r\n            <th style={{ color: \"#279980\" }}>Slika</th>\r\n            <th style={{ color: \"#279980\" }}>Količina</th>\r\n            <th style={{ color: \"#279980\" }}>Cena</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedArtikli.map((artikal) => (\r\n            <tr key={artikal.id}>\r\n              <td>{artikal.naziv}</td>\r\n              <td>\r\n                <img\r\n                  src={artikal.slikaArtikla}\r\n                  alt={artikal.naziv}\r\n                  style={{ width: \"100px\" }}\r\n                />\r\n              </td>\r\n              <td style={{ color: artikal.kolicina > 0 ? \"green\" : \"red\" }}>\r\n                {artikal.kolicina > 0 ? \"Na stanju\" : \"Nema na stanju\"}\r\n              </td>\r\n              <td>\r\n                {artikal.cena.toLocaleString(\"sr-RS\", {\r\n                  style: \"currency\",\r\n                  currency: \"RSD\",\r\n                })}\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setSelectedArtikal(artikal);\r\n                  }}\r\n                >\r\n                  Detalji\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" onClick={() => dodajUKorpu(artikal)}>\r\n                  Dodaj u korpu\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {selectedArtikal && <DetaljiArtikla artikal={selectedArtikal} />}\r\n      <Korpa cartItems={cartItems} obrisiIzKorpe={obrisiIzKorpe} />\r\n\r\n      <div>\r\n        {/* ...ostatak JSX koda... */}\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <h2 style={{ color: \"#279980\" }}>Iznos bez troskova dostave:</h2>{\" \"}\r\n          <h2>\r\n            {ukupanIznos.toLocaleString(\"sr-RS\", {\r\n              style: \"currency\",\r\n              currency: \"RSD\",\r\n            })}\r\n          </h2>\r\n          {cartItems.length > 0 && (\r\n            <button onClick={() => setShowPregledPorudzbine(true)}>\r\n              Pregled porudzbine\r\n            </button>\r\n          )}\r\n        </div>\r\n        {showPregledPorudzbine && cartItems.length > 0 && (\r\n          <div>\r\n            <h2>Artikli u korpi:</h2>\r\n            <ul>\r\n              {cartItems.map((item, index) => (\r\n                <li key={index}>\r\n                  {item.artikal.naziv} (Količina: {item.kolicina})\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n            <div>\r\n              <label htmlFor=\"adresa\">Adresa:</label>\r\n              <input\r\n                id=\"adresa\"\r\n                value={adresa}\r\n                onChange={(e) => setAdresa(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"komentar\">Komentar:</label>\r\n              <textarea\r\n                id=\"komentar\"\r\n                value={komentar}\r\n                onChange={(e) => setKomentar(e.target.value)}\r\n              />\r\n              <br />\r\n              <h2 style={{ color: \"#279980\" }}>Ukupan iznos(sa postarinom):</h2>\r\n              <h2>\r\n                {(ukupanIznos + ukupnaPostarina(cartItems)).toLocaleString(\r\n                  \"sr-RS\",\r\n                  {\r\n                    style: \"currency\",\r\n                    currency: \"RSD\",\r\n                  }\r\n                )}\r\n              </h2>\r\n            </div>\r\n            <button onClick={() => posaljiPorudzbinuNaServer()}>Poruči</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PregledArtikala;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\PrikazVerifikacija.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\SvePorudzbine.js",["160","161"],[],"import React, { useEffect, useState } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst SvePorudzbine = () => {\r\n  var token = localStorage.getItem(\"token\");\r\n  const decodedToken = jwtDecode(token);\r\n  console.log(decodedToken[\"Id\"]);\r\n\r\n  const [porudzbine, setPorudzbine] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [korisnici, setKorisnike] = useState([]);\r\n  // Novo stanje za praćenje preostalog vremena\r\n  const [preostaloVreme, setPreostaloVreme] = useState({});\r\n\r\n  //funkcija koja nam formatira datum iz 2023-08-12T17:06:22.196 u 12-08-2023 17:06 i govori status\r\n  const formatDateGetStatus = (dateString, otkazana) => {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      hour12: false,\r\n    };\r\n\r\n    const date = new Date(dateString);\r\n    const currentTime = new Date();\r\n\r\n    if (date <= currentTime) {\r\n      return <span style={{ color: \"green\" }}>Isporuceno</span>;\r\n    } else if(otkazana){\r\n      return <span style={{ color: \"red\" }}>Otkazana</span>;\r\n    }else{\r\n      \r\n      return <span style={{ color: \"orange\" }}>U toku je isporuka...</span>;\r\n    }\r\n  };\r\n\r\n  //funcija koja na idKorisnika daje njegov username\r\n  const getUsernameKorisnika = (id) => {\r\n    const korisnik = korisnici.find((korisnik) => korisnik.id === id);\r\n    return korisnik ? korisnik.korisnickoIme : \"Nepoznat korisnik\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(`https://localhost:44388/Porudzbina/allPorudzbine`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setPorudzbine(data);\r\n        setLoading(false);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greska prilikom dohvatanja svih porudzbina sa servera.\");\r\n      });\r\n\r\n    fetch(`https://localhost:44388/Korisnik/allKorisnike`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Contetnt-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      mode: \"cors\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setKorisnike(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Greska prilikom dohvatanja svih korisnika sa servera.\");\r\n      });\r\n  }, []);\r\n\r\n  // Funkcija za izračunavanje preostalog vremena\r\n  const calculateRemainingTime = (endTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const endTimeMillis = new Date(endTime).getTime();\r\n    return Math.max(0, endTimeMillis - currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ... ostatak vašeg postojećeg useEffect-a ...\r\n\r\n    // Pokretanje intervala za ažuriranje preostalog vremena svake sekunde\r\n    const interval = setInterval(() => {\r\n      const updatedRemainingTimes = {};\r\n\r\n      porudzbine.forEach((porudzbina) => {\r\n        const remainingTime = calculateRemainingTime(porudzbina.vremeIsporuke);\r\n        updatedRemainingTimes[porudzbina.id] = remainingTime;\r\n      });\r\n\r\n      setPreostaloVreme(updatedRemainingTimes);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [porudzbine]);\r\n\r\n  // Funkcija za formatiranje preostalog vremena\r\n  const formatRemainingTime = (remainingTime) => {\r\n    const days = Math.floor(remainingTime / (24 * 60 * 60 * 1000));\r\n    const hours = Math.floor(\r\n      (remainingTime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)\r\n    );\r\n    const minutes = Math.floor(\r\n      (remainingTime % (60 * 60 * 1000)) / (60 * 1000)\r\n    );\r\n    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Prikaz svih porudzbina</h1>\r\n      {loading ? (\r\n        <p>Učitavanje...</p>\r\n      ) : porudzbine.length === 0 ? (\r\n        <p>Trenutno nema porudzbina</p>\r\n      ) : (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ color: \"#279980\" }}>Kupac</th>\r\n              <th style={{ color: \"#279980\" }}>Adresa dostave</th>\r\n              <th style={{ color: \"#279980\" }}>Komentar</th>\r\n              <th style={{ color: \"#279980\" }}>Status</th>\r\n              <th style={{ color: \"#279980\" }}>Vreme do isporuke</th>\r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {porudzbine.map((porudzbina) => (\r\n              <tr key={porudzbina.id}>\r\n                <td>{getUsernameKorisnika(porudzbina.korisnikId)}</td>\r\n                {/*ovde*/}\r\n                <td>{porudzbina.adresaDostave}</td>\r\n                <td>{porudzbina.komentar}</td>\r\n                <td>{formatDateGetStatus(porudzbina.vremeIsporuke, porudzbina.otkazana)}</td>\r\n                <td>\r\n                  {porudzbina.otkazana\r\n                    ? \"/\"\r\n                    : preostaloVreme[porudzbina.id] > 0\r\n                    ? formatRemainingTime(preostaloVreme[porudzbina.id])\r\n                    : \"Isporuceno\"}\r\n                </td>\r\n                \r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SvePorudzbine;\r\n","C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\helpers\\ProtectedRoute.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\DetaljiArtikla.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\components\\Korpa.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\ArtikalService.js",[],[],"C:\\Users\\irenv\\Desktop\\Web2-Front\\src\\services\\KorisnikService.js",["162"],[],"import jwtDecode from \"jwt-decode\";\r\nimport React,{useState} from \"react\";\r\n\r\n\r\nfunction ImageUploader({ onImageUpload}){\r\n    const [selectedImage, setSelectedImage]=useState(null);\r\n\r\n    const handleImageChange=(e)=>{\r\n        const file=e.target.files[0];\r\n        if(file){\r\n            const reader=new FileReader();\r\n            reader.onload=(event)=>{\r\n                setSelectedImage(event.target.result);\r\n                onImageUpload(event.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"image/*\" onChange={handleImageChange}/>\r\n            {selectedImage && <img src={selectedImage} alt=\"Uploaded\"/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUploader;",{"ruleId":"163","severity":1,"message":"164","line":16,"column":10,"nodeType":"165","messageId":"166","endLine":16,"endColumn":19},{"ruleId":"163","severity":1,"message":"167","line":17,"column":8,"nodeType":"165","messageId":"166","endLine":17,"endColumn":17},{"ruleId":"163","severity":1,"message":"168","line":20,"column":10,"nodeType":"165","messageId":"166","endLine":20,"endColumn":14},{"ruleId":"163","severity":1,"message":"169","line":20,"column":16,"nodeType":"165","messageId":"166","endLine":20,"endColumn":23},{"ruleId":"163","severity":1,"message":"170","line":21,"column":10,"nodeType":"165","messageId":"166","endLine":21,"endColumn":14},{"ruleId":"163","severity":1,"message":"171","line":21,"column":16,"nodeType":"165","messageId":"166","endLine":21,"endColumn":23},{"ruleId":"163","severity":1,"message":"172","line":22,"column":10,"nodeType":"165","messageId":"166","endLine":22,"endColumn":13},{"ruleId":"163","severity":1,"message":"173","line":22,"column":15,"nodeType":"165","messageId":"166","endLine":22,"endColumn":21},{"ruleId":"163","severity":1,"message":"174","line":23,"column":10,"nodeType":"165","messageId":"166","endLine":23,"endColumn":26},{"ruleId":"163","severity":1,"message":"175","line":23,"column":28,"nodeType":"165","messageId":"166","endLine":23,"endColumn":47},{"ruleId":"163","severity":1,"message":"176","line":5,"column":10,"nodeType":"165","messageId":"166","endLine":5,"endColumn":16},{"ruleId":"163","severity":1,"message":"177","line":5,"column":18,"nodeType":"165","messageId":"166","endLine":5,"endColumn":35},{"ruleId":"163","severity":1,"message":"178","line":11,"column":10,"nodeType":"165","messageId":"166","endLine":11,"endColumn":29},{"ruleId":"163","severity":1,"message":"179","line":13,"column":10,"nodeType":"165","messageId":"166","endLine":13,"endColumn":17},{"ruleId":"163","severity":1,"message":"180","line":13,"column":19,"nodeType":"165","messageId":"166","endLine":13,"endColumn":29},{"ruleId":"163","severity":1,"message":"181","line":14,"column":10,"nodeType":"165","messageId":"166","endLine":14,"endColumn":22},{"ruleId":"163","severity":1,"message":"182","line":14,"column":24,"nodeType":"165","messageId":"166","endLine":14,"endColumn":39},{"ruleId":"163","severity":1,"message":"183","line":18,"column":10,"nodeType":"165","messageId":"166","endLine":18,"endColumn":23},{"ruleId":"163","severity":1,"message":"184","line":18,"column":25,"nodeType":"165","messageId":"166","endLine":18,"endColumn":35},{"ruleId":"163","severity":1,"message":"185","line":19,"column":10,"nodeType":"165","messageId":"166","endLine":19,"endColumn":23},{"ruleId":"163","severity":1,"message":"186","line":22,"column":10,"nodeType":"165","messageId":"166","endLine":22,"endColumn":19},{"ruleId":"163","severity":1,"message":"168","line":24,"column":10,"nodeType":"165","messageId":"166","endLine":24,"endColumn":14},{"ruleId":"163","severity":1,"message":"187","line":110,"column":9,"nodeType":"165","messageId":"166","endLine":110,"endColumn":26},{"ruleId":"163","severity":1,"message":"188","line":3,"column":10,"nodeType":"165","messageId":"166","endLine":3,"endColumn":14},{"ruleId":"163","severity":1,"message":"185","line":11,"column":10,"nodeType":"165","messageId":"166","endLine":11,"endColumn":23},{"ruleId":"163","severity":1,"message":"187","line":87,"column":9,"nodeType":"165","messageId":"166","endLine":87,"endColumn":26},{"ruleId":"163","severity":1,"message":"189","line":8,"column":25,"nodeType":"165","messageId":"166","endLine":8,"endColumn":41},{"ruleId":"163","severity":1,"message":"168","line":9,"column":10,"nodeType":"165","messageId":"166","endLine":9,"endColumn":14},{"ruleId":"163","severity":1,"message":"190","line":51,"column":9,"nodeType":"165","messageId":"166","endLine":51,"endColumn":23},{"ruleId":"163","severity":1,"message":"191","line":52,"column":9,"nodeType":"165","messageId":"166","endLine":52,"endColumn":14},{"ruleId":"192","severity":1,"message":"193","line":77,"column":6,"nodeType":"194","endLine":77,"endColumn":8,"suggestions":"195"},{"ruleId":"163","severity":1,"message":"196","line":11,"column":10,"nodeType":"165","messageId":"166","endLine":11,"endColumn":18},{"ruleId":"163","severity":1,"message":"197","line":11,"column":20,"nodeType":"165","messageId":"166","endLine":11,"endColumn":31},{"ruleId":"163","severity":1,"message":"198","line":28,"column":9,"nodeType":"165","messageId":"166","endLine":28,"endColumn":19},{"ruleId":"163","severity":1,"message":"198","line":8,"column":9,"nodeType":"165","messageId":"166","endLine":8,"endColumn":19},{"ruleId":"163","severity":1,"message":"191","line":8,"column":10,"nodeType":"165","messageId":"166","endLine":8,"endColumn":15},{"ruleId":"163","severity":1,"message":"199","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":16},{"ruleId":"163","severity":1,"message":"200","line":16,"column":10,"nodeType":"165","messageId":"166","endLine":16,"endColumn":28},{"ruleId":"163","severity":1,"message":"201","line":17,"column":10,"nodeType":"165","messageId":"166","endLine":17,"endColumn":18},{"ruleId":"163","severity":1,"message":"202","line":17,"column":20,"nodeType":"165","messageId":"166","endLine":17,"endColumn":31},{"ruleId":"163","severity":1,"message":"203","line":37,"column":17,"nodeType":"165","messageId":"166","endLine":37,"endColumn":25},{"ruleId":"163","severity":1,"message":"204","line":40,"column":9,"nodeType":"165","messageId":"166","endLine":40,"endColumn":24},{"ruleId":"163","severity":1,"message":"205","line":162,"column":12,"nodeType":"165","messageId":"166","endLine":162,"endColumn":29},{"ruleId":"163","severity":1,"message":"206","line":307,"column":9,"nodeType":"165","messageId":"166","endLine":307,"endColumn":21},{"ruleId":"163","severity":1,"message":"207","line":17,"column":11,"nodeType":"165","messageId":"166","endLine":17,"endColumn":18},{"ruleId":"192","severity":1,"message":"208","line":81,"column":6,"nodeType":"194","endLine":81,"endColumn":8,"suggestions":"209"},{"ruleId":"163","severity":1,"message":"167","line":1,"column":8,"nodeType":"165","messageId":"166","endLine":1,"endColumn":17},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'jwtDecode' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'temp' is assigned a value but never used.","'setTemp' is assigned a value but never used.","'tip' is assigned a value but never used.","'setTip' is assigned a value but never used.","'requestCompleted' is assigned a value but never used.","'setRequestCompleted' is assigned a value but never used.","'isPast' is defined but never used.","'differenceInYears' is defined but never used.","'notificationVisible' is assigned a value but never used.","'isValid' is assigned a value but never used.","'setIsValid' is assigned a value but never used.","'isTypingDate' is assigned a value but never used.","'setIsTypingDate' is assigned a value but never used.","'selectPicture' is assigned a value but never used.","'setPicture' is assigned a value but never used.","'UploadedImage' is assigned a value but never used.","'postarina' is assigned a value but never used.","'handleImageChange' is assigned a value but never used.","'json' is defined but never used.","'setIsLoginFailed' is assigned a value but never used.","'slikaKorisnika' is assigned a value but never used.","'email' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'decodedToken' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["210"],"'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'formatDate' is assigned a value but never used.","'format' is defined but never used.","'selectedArtikliIds' is assigned a value but never used.","'kolicina' is assigned a value but never used.","'setKolicina' is assigned a value but never used.","'setKorpa' is assigned a value but never used.","'odabraniArtikli' is assigned a value but never used.","'postarinaProdavca' is defined but never used.","'handlePoruci' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["211"],{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [decodedToken, token]",{"range":"216","text":"217"},"Update the dependencies array to be: [token]",{"range":"218","text":"219"},[2429,2431],"[decodedToken, token]",[2530,2532],"[token]"]